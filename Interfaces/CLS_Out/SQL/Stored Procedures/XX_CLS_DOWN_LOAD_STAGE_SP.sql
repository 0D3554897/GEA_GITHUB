USE [IMAPSStg]
GO

/****** Object:  StoredProcedure [dbo].[XX_CLS_DOWN_LOAD_STAGE_SP]    Script Date: 7/14/2022 3:31:29 PM ******/
DROP PROCEDURE [dbo].[XX_CLS_DOWN_LOAD_STAGE_SP]
GO

/****** Object:  StoredProcedure [dbo].[XX_CLS_DOWN_LOAD_STAGE_SP]    Script Date: 7/14/2022 3:31:29 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[XX_CLS_DOWN_LOAD_STAGE_SP] ( 
@in_STATUS_RECORD_NUM    integer, 
@out_SystemError int = NULL OUTPUT, 
@out_STATUS_DESCRIPTION varchar(275) =NULL OUTPUT) AS
BEGIN
/************************************************************************************************  
Name:       	[XX_CLS_DOWN_LOAD_STAGE_SP]
Author:     	Keith McGuire
Created:    	01/2008
Purpose:    	Collect GL transactions, burden and FDS feed to staging table XX_CLS_DOWN

Prerequisites: 	month end processing
Version: 	1.0

1M changes - track DIVISION

CR4563 - default customer number logic - 2012-04-04
CR6297 - new Division 1P - 2013-04-30
DR7065 - CLS Down needs to populate the IGS Project for all 817 records - 2014-08-26
DR7888 - All revenue was previously assumed to be 30-01-01. Now there are more revenue accounts, 
			and are to be treated according to PROJ_REV_SETUP - 2015-03-31 gea
CR8763 - new Division 2G - 2016-11-10
CR10743 - update IMAPS_PROJ_ID using project in UDEF 60  *** DIVISION 16 ONLY ***  02-15-2019
************************************************************************************************/  
	/*
	NEW CLS DOWN LOGIC

	1.  CREATE YTD IMAGE OF COSTPOINT TO CLS

	2.  CREATE CLS 999 FILE FOR CURRENT MONTH 
		BASED ON DIFFERENCE BETWEEN
			a. THIS MONTH YTD IMAGE
			b. LAST MONTH YTD IMAGE 
	*/

	--0.  DECLARE AND SET VARIABLES
	DECLARE
	@FY_CD  char(4),
	@PD_NO int,
	@SP_NAME varchar(50),
	@DFLT_PROJ varchar(50),
	@IMAPS_error_number      int,
    @SQLServer_error_code    int,
    @row_count               int,
    @error_msg_placeholder1  sysname,
    @error_msg_placeholder2  sysname,
	@rev_acct_id varchar(10),
	@ret_code int,
	@DIVISION CHAR(2)



SET @SP_NAME = 'XX_CLS_DOWN_LOAD_STAGE_SP'

PRINT '***********************************************************************************************************************'
PRINT @SP_NAME
PRINT '  -- 22 ACTIVITIES'
PRINT '***********************************************************************************************************************'

	SELECT @rev_acct_id = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
	WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'REVENUE_ACCT_ID'

	SELECT @FY_CD = FY_SENT, @PD_NO = MONTH_SENT
	FROM dbo.XX_CLS_DOWN_LOG
	WHERE STATUS_RECORD_NUM = @in_STATUS_RECORD_NUM
	
	SELECT @DFLT_PROJ = PARAMETER_VALUE
	FROM  XX_PROCESSING_PARAMETERS
	WHERE INTERFACE_NAME_CD = 'CLS'
	AND PARAMETER_NAME = 'DEFAULT_RPT_PROJ_ID'	




	/* DATA INSERTS */


	PRINT '1. TRUNCATE TABLES'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'truncate tables XX_CLS_DOWN_PROJ_INFO,'
	SET @error_msg_placeholder2 = 'XX_CLS_DOWN_THIS_MONTH_YTD, and XX_CLS_DOWN'

	TRUNCATE TABLE XX_CLS_DOWN_PROJ_INFO
	TRUNCATE TABLE XX_CLS_DOWN_THIS_MONTH_YTD
	TRUNCATE TABLE XX_CLS_DOWN
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	
/********** DR 7888 CHANGES DETAIL INSERT TO ELIMINATE REVENUE ACCOUNTS WITH FILTER **************/

	PRINT '2. GL DETAIL INSERT'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT DETAILS INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'FROM GL_POST_SUM'

	
	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(
	DIVISION, IMAPS_ACCT, IMAPS_PROJ_ID, DOLLAR_AMT
	)
	SELECT 
	LEFT(ORG_ID,2) AS DIVISION, ACCT_ID AS IMAPS_ACCT, PROJ_ID AS IMAPS_PROJ_ID, SUM(AMT) AS DOLLAR_AMT
	FROM 
	IMAPS.DELTEK.GL_POST_SUM GL
	WHERE 
	--WE GET REVENUE FROM ELSEWHERE
	--SO WE EXCLUDE EVERYTHING THAT BEGINS WITH A 3 - DR 7888
	LEFT(ACCT_ID,1)<>'3'
	AND
	ACCT_ID NOT IN (SELECT PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
					WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'REVENUE_ACCT_ID')
	AND
	--I'M NOT SURE WHERE THIS CAME FROM ORIGINALLY, BUT IT IS WRITTEN KIND OF BACKWARDS
	NOT (PROJ_ID IS NOT NULL AND(LEFT(PROJ_ID,4) = 'DDOU' AND ACCT_ID> '30-00-00'))
	AND
	/****
	MUST BE RELATED TO AN ACCOUNT IN THE MAPPING TABLES
	******/
	(	
		(0 < (SELECT COUNT(1)
		 FROM XX_CLS_DOWN_ACCT_MAPPING
		 WHERE DIVISION = LEFT(ORG_ID,2)
		 AND IMAPS_ACCT_START <= GL.ACCT_ID
		 AND IMAPS_ACCT_END >= GL.ACCT_ID))
		OR
		(0 < (SELECT COUNT(1)
		 FROM XX_CLS_DOWN_ACCT_SERV_MAPPING
		 WHERE DIVISION = LEFT(ORG_ID,2)
		 AND IMAPS_ACCT_START <= GL.ACCT_ID
		 AND IMAPS_ACCT_END >= GL.ACCT_ID))
	)
	--MUST BE RELATED TO THIS FISCAL YEAR
	AND
	FY_CD = @FY_CD
	AND
	PD_NO <= @PD_NO
	AND
	PD_NO >= 1
	GROUP BY
	LEFT(ORG_ID,2), ACCT_ID, PROJ_ID
	HAVING SUM(AMT) <> .00
	
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


/********** DR 7888 CHANGES REVENUE COLLECTION TO ACCOMMODATE MULTIPLE REVENUE ACCOUNTS
1) FINDS REVENUE LEVEL FOR EACH PROJECT FROM PROJECT SETUP
2) MATCHES REVENUE PROJECT TO CHARGING PROJECT
3) APPLIES APPLICABLE REVENUE ACCOUNT NUMBER TO ALL PROJ_SUM RECORDS
4) WHERE PROJECT IS MISSING FROM PROJECT SETUP, 
	DEFAULTS TO DIV16 DEFAULT REVENUE ACCT 30-01-01 (@REV_ACCT_ID) FROM PARAMETER FILE
****************************************************************************************/

	PRINT '3.  REVENUE INSERT'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT REVENUE INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'FROM PROJ_SUM'

	
	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(
	DIVISION, IMAPS_ACCT, IMAPS_PROJ_ID, DOLLAR_AMT, DESCRIPTION2
	)
	SELECT 
	--'cls_down_this_month_ytd_rev_insert' as tble,
	LEFT(PL.ORG_ID,2) AS DIVISION,
	-- @rev_acct_id AS BEFORE_DR7888, 
	coalesce(pQ.acct_id, @rev_acct_id) as IMAPS_ACCT,
	--PL.acct_id AS PROJ_SUM_ACCT_ID,
	-- PQ.PROJ_ID as PROJ_SETUP_PROJ_ID,
	PL.PROJ_ID AS IMAPS_PROJ_ID, 
	SUM(-1.0*TOT_REV_TGT_AMT) AS DOLLAR_AMT,
	'REVENUE' as rev
	FROM 
	IMAPS.DELTEK.PROJ_SUM PL
	left join (
		select prs.proj_id, Len(prs.proj_id) as length, ps.acct_id
		from imaps.deltek.PROJ_REV_SETUP prs
		inner join imaps.deltek.proj_sum ps
		on prs.PROJ_ID = ps.proj_id
		where 
		FY_CD = @FY_CD
		and PD_NO = @PD_NO
		GROUP BY PRS.PROJ_ID, PS.ACCT_ID
	) pq
	on pq.PROJ_ID = LEFT(pl.proj_id,pq.length)
	WHERE 
	-- for problem DR7888 identified
	-- CHARINDEX('WTSN',PL.proj_id) > 0 and
	-- right(PL.proj_id,4)= 'WTSN' and 
	--WE DON'T GET REVENUE FROM DOU PROJECTS
	 LEFT(PL.PROJ_ID, 4) <> 'DDOU'
	--MUST BE RELATED TO THIS FISCAL YEAR
	AND
	FY_CD = @FY_CD
	AND	
	PD_NO <= @PD_NO
	AND
	PD_NO >= 1
	-- AND
	-- TOT_REV_TGT_AMT <> 0
	GROUP BY 
	LEFT(PL.ORG_ID,2),
	coalesce(pQ.acct_id, @rev_acct_id),
	PL.PROJ_ID
	HAVING SUM(-1.0*TOT_REV_TGT_AMT) <> 0
	
/*************************** LEGACY CODE REPLACED BY DR 7888 ******************************************
	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(
	DIVISION, IMAPS_ACCT, IMAPS_PROJ_ID, DOLLAR_AMT, DESCRIPTION2
	)
	SELECT 
	LEFT(ORG_ID,2) AS DIVISION,
	@rev_acct_id AS IMAPS_ACCT, 
	PROJ_ID AS IMAPS_PROJ_ID, SUM(-1.0*TOT_REV_TGT_AMT) AS DOLLAR_AMT,
	'REVENUE'
	FROM 
	IMAPS.DELTEK.PROJ_SUM PL
	WHERE 
	--WE DON'T GET REVENUE FROM DOU PROJECTS
	LEFT(PROJ_ID, 4) <> 'DDOU'
	--MUST BE RELATED TO THIS FISCAL YEAR
	AND
	FY_CD = @FY_CD
	AND	
	PD_NO <= @PD_NO
	AND
	PD_NO >= 1
	GROUP BY
	LEFT(ORG_ID,2), PROJ_ID
	HAVING
	SUM(-1.0*TOT_REV_TGT_AMT) <> .00
*************************** END LEGACY CODE REPLACED BY DR 7888 ******************************************/
	
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER




	PRINT '4.	DIRECT BURDEN INSERTS'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT DIRECT BURDEN INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'FROM PROJ_BURD_SUM'

	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(DIVISION, IMAPS_PROJ_ID, GA_AMT, OVERHEAD_AMT, DESCRIPTION2)
	SELECT 
	LEFT(ORG_ID,2) AS DIVISION,
	PROJ_ID,
	SUM(CASE 
		WHEN POOL_NO >= 70 THEN SUB_TGT_AMT 
		ELSE 0
		END) AS GA_AMT,
	SUM( CASE 
		 WHEN POOL_NO < 70  THEN SUB_TGT_AMT 
		 ELSE 
0
		 END
	   ) AS OVERHEAD_AMT,
	'BURDEN D'
	FROM 
	IMAPS.DELTEK.PROJ_BURD_SUM
	WHERE
	FY_CD = @FY_CD
	AND	
	PD_NO <= @PD_NO
	AND
	PD_NO >= 1
	AND
	--TARGET RATES USED FOR DIRECT PROJECTS
	LEFT(PROJ_ID, 1) = 'D'
	AND
	--EXCLUDE DDOU PROJECTS
	LEFT(PROJ_ID, 4) <> 'DDOU'
	GROUP BY LEFT(ORG_ID,2), PROJ_ID

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER



	
	PRINT '5.	NON-DIRECT BURDEN INSERTS'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT NON-DIRECT BURDEN INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'FROM PROJ_BURD_SUM'

	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(DIVISION, IMAPS_PROJ_ID, GA_AMT, OVERHEAD_AMT, DESCRIPTION2)
	SELECT 
	LEFT(ORG_ID,2) AS DIVISION, 
	PROJ_ID,
	SUM(CASE 
		WHEN POOL_NO >= 70 THEN SUB_ACT_AMT 
		ELSE 0
		END) AS GA_AMT,
	SUM( CASE 
		 WHEN POOL_NO < 70  THEN SUB_ACT_AMT 
		 ELSE 0
		 END
	   ) AS OVERHEAD_AMT,
	'BURDEN ND'
	FROM 
	IMAPS.DELTEK.PROJ_BURD_SUM
	WHERE
	FY_CD = @FY_CD
	AND	
	PD_NO <= @PD_NO
	AND
	PD_NO >= 1
	AND
	--ACTUAL RATES USED FOR NON-DIRECT PROJECTS
	LEFT(PROJ_ID, 1) <> 'D'	
	AND
	--EXCLUDE DDOU PROJECTS
	LEFT(PROJ_ID, 4) <> 'DDOU'
	GROUP BY LEFT(ORG_ID,2), PROJ_ID

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	
	PRINT '6.	DELETE ZERO DOLLAR BURDEN RECORDS'	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'DELETE ZERO DOLLAR BURDEN'
	SET @error_msg_placeholder2 = 'FROM XX_CLS_DOWN_THIS_MONTH_YTD'

	DELETE
	FROM XX_CLS_DOWN_THIS_MONTH_YTD
	WHERE IMAPS_ACCT IS NULL
	AND GA_AMT = .00
	AND OVERHEAD_AMT = .00
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER



	PRINT '7.	FDS REVERSE INSERT'	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT FDS REVERSE INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'FROM XX_CLS_DOWN_FDS_REVERSE'


	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(
	 DIVISION,
	 CONTRACT_NUM, IGS_PROJ, DOLLAR_AMT,
	 CUSTOMER_NUM, SERVICE_OFFERING,
	 MACHINE_TYPE_CD, PRODUCT_ID, 
	 DESCRIPTION2
	)
	SELECT
	DIVISION,
	CONTRACT_NUM, PROJ_ABBRV_CD, SUM(DOLLAR_AMT),
	CUSTOMER_NUM, SERVICE_OFFERED,
	MACHINE_TYPE, PRODUCT_ID,
	'FDS REVERSE'
	FROM XX_CLS_DOWN_FDS_REVERSE
	WHERE 
	YEAR(RUN_DT) = @FY_CD 
	AND
	MONTH(RUN_DT) <= @PD_NO
	GROUP BY 
	DIVISION,
	CONTRACT_NUM, PROJ_ABBRV_CD,
	CUSTOMER_NUM, SERVICE_OFFERED,
	MACHINE_TYPE, PRODUCT_ID
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER



	/* PROJECT DATA MAPPINGS */

	
	PRINT '8.	PROJECT RELATED DATA MAPPINGS'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'PERFORM PROJECT RELATED'
	SET @error_msg_placeholder2 = 'DATA MAPPINGS'
	
	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	L1_PROJ_SEG_ID = LEFT(IMAPS_PROJ_ID, 4),
	CONTRACT_NUM = DBO.XX_GET_CONTRACT_UF(IMAPS_PROJ_ID),
	IGS_PROJ = DBO.XX_GET_PROJ_ABBRV_CD_UF(IMAPS_PROJ_ID),
	SERVICE_OFFERING = DBO.XX_GET_SERVICE_OFFERING_UF(IMAPS_PROJ_ID),
	CUSTOMER_NUM = DBO.XX_GET_CUSTOMER_FOR_PROJECT_UF(IMAPS_PROJ_ID)	
	WHERE IMAPS_PROJ_ID IS NOT NULL
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	--SEAN DOES NOT WANT ANY INDIRECT PROJECTS TO HAVE CONTRACT NUMBERS ASSOCIATED WITH THEM
	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET CONTRACT_NUM = ' '
	WHERE LEFT(IMAPS_PROJ_ID, 4) IN ('MOSS','BOPP','IINT')

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	/* ACCOUNT MAPPINGS */
	PRINT '9.	FDS REVERSE ACCOUNT MAPPING'
	/*
	FDS was supposed to split our revenue into different accounts for CSI, BTO, WEB, OSW, and OHW.
	In January 2007, it turns out they did not do this.  
	They sent everything to the single CSI revenue account.
	*/	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'PERFORM CLS ACCOUNT MAPPING'
	SET @error_msg_placeholder2 = 'FOR FDS REVERSE TRANSACTIONS'

	DECLARE @ONLY_ONE_FDS_REVERSE_ACCOUNT VARCHAR(5),
		@ONLY_ONE_FDS_REVERSE_ACCOUNT_MAJOR VARCHAR(3),
		@ONLY_ONE_FDS_REVERSE_ACCOUNT_MINOR VARCHAR(4),
		@ONLY_ONE_FDS_REVERSE_ACCOUNT_SUBMINOR VARCHAR(4)


	SELECT 	@ONLY_ONE_FDS_REVERSE_ACCOUNT = PARAMETER_VALUE 
	FROM  	XX_PROCESSING_PARAMETERS 
	WHERE 	INTERFACE_NAME_CD = 'CLS' 
	AND 	PARAMETER_NAME = 'ONLY_ONE_FDS_REVERSE_ACCOUNT'

	SELECT 	@ONLY_ONE_FDS_REVERSE_ACCOUNT_MAJOR =  PARAMETER_VALUE
	FROM  	XX_PROCESSING_PARAMETERS 
	WHERE 	INTERFACE_NAME_CD = 'CLS' 
	AND 	PARAMETER_NAME = 'ONLY_ONE_FDS_REVERSE_MAJOR'

	SELECT 	@ONLY_ONE_FDS_REVERSE_ACCOUNT_MINOR = PARAMETER_VALUE 
	FROM  	XX_PROCESSING_PARAMETERS 
	WHERE 	INTERFACE_NAME_CD = 'CLS' 
	AND 	PARAMETER_NAME = 'ONLY_ONE_FDS_REVERSE_MINOR'

	SELECT 	@ONLY_ONE_FDS_REVERSE_ACCOUNT_SUBMINOR = PARAMETER_VALUE 
	FROM  	XX_PROCESSING_PARAMETERS 
	WHERE 	INTERFACE_NAME_CD = 'CLS' 
	AND 	PARAMETER_NAME = 'ONLY_ONE_FDS_REVERSE_SUBMINOR'

	--IF IT DOES, THEN UPDATE TO DEFAULT FDS REVERSAL ACCOUNT
	IF @ONLY_ONE_FDS_REVERSE_ACCOUNT = 'YES'
	BEGIN
		UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
		SET CLS_MAJOR = @ONLY_ONE_FDS_REVERSE_ACCOUNT_MAJOR,
		CLS_MINOR = @ONLY_ONE_FDS_REVERSE_ACCOUNT_MINOR,
		CLS_SUB_MINOR = @ONLY_ONE_FDS_REVERSE_ACCOUNT_SUBMINOR
		WHERE DESCRIPTION2 LIKE 'FDS REVERSE%'
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END
	ELSE --ELSE USE MAPPING FOR REVENUE
	BEGIN
		--FDS REVERSE MAPPING
		UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
		SET 
		CLS_MAJOR = MAP.CLS_MAJOR,
		CLS_MINOR = MAP.CLS_MINOR,
		CLS_SUB_MINOR = MAP.CLS_SUB_MINOR
		FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
		INNER JOIN
		XX_CLS_DOWN_ACCT_MAPPING MAP
		ON
		(
		CLS.DESCRIPTION2 LIKE 'FDS%'
		AND
		MAP.DIVISION=CLS.DIVISION
		AND
		MAP.REVERSE_FDS=1
		AND
		MAP.IMAPS_ACCT_START <= @rev_acct_id
		AND
		MAP.IMAPS_ACCT_END >= @rev_acct_id
		)
		UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
		SET 
		CLS_MAJOR = MAP.CLS_MAJOR,
		CLS_MINOR = MAP.CLS_MINOR,
		CLS_SUB_MINOR = MAP.CLS_SUB_MINOR
		FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
		INNER JOIN
		XX_CLS_DOWN_ACCT_SERV_MAPPING MAP
		ON
		(
		CLS.DESCRIPTION2 LIKE 'FDS%'
		AND
		MAP.DIVISION=CLS.DIVISION
		AND
		MAP.REVERSE_FDS=1
		AND	
		MAP.IMAPS_ACCT_START <= @rev_acct_id
		AND
		MAP.IMAPS_ACCT_END >= @rev_acct_id
		AND
		CLS.SERVICE_OFFERING = MAP.SERVICE_OFFERING
		)
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END
		
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER




	PRINT '10.	BURDEN ACCOUNT MAPPING'	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'PERFORM CLS ACCOUNT MAPPING'
	SET @error_msg_placeholder2 = 'FOR BURDEN TRANSACTIONS'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET DOLLAR_AMT = GA_AMT + OVERHEAD_AMT
	WHERE DESCRIPTION2 LIKE 'BURDEN%'
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = MAP.CLS_MAJOR,
	CLS_MINOR = MAP.CLS_MINOR,
	CLS_SUB_MINOR = MAP.CLS_SUB_MINOR
	FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
	INNER JOIN
	XX_CLS_DOWN_ACCT_MAPPING MAP
	ON
	(
	CLS.DESCRIPTION2 LIKE 'BURDEN%'
	AND
	MAP.APPLY_BURDEN='Y'
	AND
	MAP.DIVISION=CLS.DIVISION
	)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = MAP.CLS_MAJOR,
	CLS_MINOR = MAP.CLS_MINOR,
	CLS_SUB_MINOR = MAP.CLS_SUB_MINOR
	FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
	INNER JOIN
	XX_CLS_DOWN_ACCT_SERV_MAPPING MAP
	ON
	(
	CLS.DESCRIPTION2 LIKE 'BURDEN%'
	AND
	MAP.APPLY_BURDEN='Y'
	AND
	CLS.SERVICE_OFFERING = MAP.SERVICE_OFFERING
	AND
	MAP.DIVISION=CLS.DIVISION
	)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER



	
	PRINT '11.	GL AND REVENUE ACCOUNT MAPPING'	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'PERFORM CLS ACCOUNT MAPPING'
	SET @error_msg_placeholder2 = 'FOR GL AND REVENUE TRANSACTIONS'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = MAP.CLS_MAJOR,
	CLS_MINOR = MAP.CLS_MINOR,
	CLS_SUB_MINOR = MAP.CLS_SUB_MINOR,
	DOLLAR_AMT = CLS.DOLLAR_AMT * MAP.MULTIPLIER
	FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
	INNER JOIN
	XX_CLS_DOWN_ACCT_MAPPING MAP
	ON
	(CLS.IMAPS_ACCT IS NOT NULL
	 AND
	 MAP.DIVISION=CLS.DIVISION
	 AND
	 MAP.IMAPS_ACCT_START <= CLS.IMAPS_ACCT
	 AND
	 MAP.IMAPS_ACCT_END >= CLS.IMAPS_ACCT)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = MAP.CLS_MAJOR,
	CLS_MINOR = MAP.CLS_MINOR,
	CLS_SUB_MINOR = MAP.CLS_SUB_MINOR,
	DOLLAR_AMT = CLS.DOLLAR_AMT * MAP.MULTIPLIER
	FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
	INNER JOIN
	XX_CLS_DOWN_ACCT_SERV_MAPPING MAP
	ON
	(CLS.IMAPS_ACCT IS NOT NULL
	 AND
	 MAP.DIVISION=CLS.DIVISION
	 AND
	 MAP.IMAPS_ACCT_START <= CLS.IMAPS_ACCT
	 AND
	 MAP.IMAPS_ACCT_END >= CLS.IMAPS_ACCT
	 AND
	 CLS.SERVICE_OFFERING = MAP.SERVICE_OFFERING)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	PRINT '19.	APPLY NEW MAJORS/MINORS TO PROJECTS WITH CERTAIN OCC VALUES'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'DELETE ZERO DOLLAR TRANSACTION'
	SET @error_msg_placeholder2 = 'FROM XX_CLS_DOWN_THIS_MONTH_YTD'


	--CR 13708
	--direct costs
	UPDATE imapsstg.dbo.XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'0'),'MAJ'),CLS_MAJOR),
	CLS_MINOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'0'),'MIN'),CLS_MINOR),
	CLS_SUB_MINOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'0'),'SUB'),CLS_SUB_MINOR)
	WHERE IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) IN 
		(SELECT  LEFT(PARAMETER_NAME,2) AS BMDIV
		  FROM IMAPSSTG.DBO.XX_PROCESSING_PARAMETERS
		  WHERE INTERFACE_NAME_CD = 'CLS'
		  AND SUBSTRING(PARAMETER_NAME,3,1) IN ('3','4'))

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER	

	-- burden on direct costs
	UPDATE imapsstg.dbo.XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CLS_MAJOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'4'),'MAJ'),CLS_MAJOR),
	CLS_MINOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'4'),'MIN'),CLS_MINOR),
	CLS_SUB_MINOR = COALESCE(IMAPSSTG.DBO.XX_BM_DIV_MMS_UF(IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) + COALESCE(LEFT(IMAPS_ACCT,1),'4'),'SUB'),CLS_SUB_MINOR)
	WHERE IMAPSSTG.DBO.SB_GET_BUS_MEAS_DIV_CD_UF(imaps_proj_id) IN 
		(SELECT  LEFT(PARAMETER_NAME,2) AS BMDIV
		  FROM IMAPSSTG.DBO.XX_PROCESSING_PARAMETERS
		  WHERE INTERFACE_NAME_CD = 'CLS'
		  AND SUBSTRING(PARAMETER_NAME,3,1) = '4')
	and imaps_acct is null
	and cls_major = '456'
	AND DESCRIPTION2 = 'BURDEN D'

	PRINT '17.	SERVICE OFFERING DATA'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'WITH SERVICE OFFERING DATA'

	DECLARE
	@MACHINETYPEDFLT VARCHAR(7),
	@PRODUCTIDDFLT VARCHAR(12),
	@CUSTOMERDFLT VARCHAR(7),
	@CONTRACTDFLT VARCHAR(8)

--BEGIN DEFAULTS FOR EACH DIVISION
	SET @DIVISION = '16'

	SELECT @MACHINETYPEDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_MACHINE_TYPE'

	SELECT @PRODUCTIDDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_PRODUCT_ID'

	SELECT @CUSTOMERDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CUSTOMER_NUM'

	SELECT @CONTRACTDFLT  = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CONTRACT_NUM'


	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET MACHINE_TYPE_CD = @MACHINETYPEDFLT
	WHERE SERVICE_OFFERING = 'OHW' AND MACHINE_TYPE_CD IS NULL
	AND DIVISION = @DIVISION
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET PRODUCT_ID = @PRODUCTIDDFLT
	WHERE SERVICE_OFFERING = 'OSW'  AND PRODUCT_ID IS NULL
	AND DIVISION = @DIVISION

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	SET @DIVISION = '1M'

	SELECT @MACHINETYPEDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_MACHINE_TYPE'

	SELECT @PRODUCTIDDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_PRODUCT_ID'

	SELECT @CUSTOMERDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CUSTOMER_NUM'

	SELECT @CONTRACTDFLT  = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CONTRACT_NUM'


	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET MACHINE_TYPE_CD = @MACHINETYPEDFLT
	WHERE SERVICE_OFFERING = 'OHW' AND MACHINE_TYPE_CD IS NULL
	AND DIVISION = @DIVISION
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET PRODUCT_ID = @PRODUCTIDDFLT
	WHERE SERVICE_OFFERING = 'OSW'  AND PRODUCT_ID IS NULL
	AND DIVISION = @DIVISION

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

--END




	PRINT '12.	MEMO ENTRY INSERTS'	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT MEMO ENTRIES'
	SET @error_msg_placeholder2 = 'INTO XX_CLS_DOWN_THIS_MONTH_YTD'
	
	INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
	(DIVISION, CLS_MAJOR, CLS_MINOR, CLS_SUB_MINOR,
	 IMAPS_ACCT, IMAPS_PROJ_ID, L1_PROJ_SEG_ID, 
	 DOLLAR_AMT,
	 CONTRACT_NUM, IGS_PROJ, SERVICE_OFFERING,
	 CUSTOMER_NUM)
	SELECT 
	CLS.DIVISION, MAP.CLS_MAJOR, MAP.CLS_MINOR, MAP.CLS_SUB_MINOR,
	CLS.IMAPS_ACCT, CLS.IMAPS_PROJ_ID, CLS.L1_PROJ_SEG_ID,
	CLS.DOLLAR_AMT * ISNULL(MAP.MULTIPLIER, 1), 
	CLS.CONTRACT_NUM, CLS.IGS_PROJ, CLS.SERVICE_OFFERING,
	CLS.CUSTOMER_NUM
	FROM
	XX_CLS_DOWN_THIS_MONTH_YTD CLS
	INNER JOIN
	XX_CLS_DOWN_ACCT_MEMO_MAPPING MAP
	ON
	(
	 CLS.IMAPS_ACCT IS NOT NULL
	 AND
	 MAP.DIVISION=CLS.DIVISION
	 AND
	 CLS.IMAPS_ACCT = MAP.IMAPS_ACCT
	)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	
	PRINT '13.	MANUFACTURED PL & GL BURDEN VARIANCE TRANSACTION'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT PL & GL BURDEN VARIANCE TRANSACTION'
	SET @error_msg_placeholder2 = 'INTO XX_CLS_DOWN_THIS_MONTH_YTD'

	DECLARE
	@PL_BURDEN_TOTAL DECIMAL(14,2),
	@GL_BURDEN_RECOVERY_TOTAL DECIMAL(14,2),
	@FDS_REVERSE_TOTAL DECIMAL(14,2),
	@FDS_REVERSE_SOURCE_TOTAL DECIMAL(14,2),
	@FDS_BALANCE DECIMAL(14,2),
	@MESSAGE_PARAM_1 VARCHAR(300),
	@PL_GL_BALANCE_MAJOR VARCHAR(3),
	@PL_GL_BALANCE_MINOR VARCHAR(4),
	@PL_GL_BALANCE_SUBMINOR VARCHAR(4),
	@PL_GL_BALANCE_CONTRACT VARCHAR(5)


	--FOR 16
	SET @DIVISION='16'
	-- CALCULATE DIFFERENCE BETWEEN PL AND GL BURDEN AND PUT IT AS SEPARATE ROW TO CLS DOWN TABLE.
	SELECT @PL_BURDEN_TOTAL =  ISNULL(SUM( SUB_ACT_AMT ),0)  FROM IMAPS.DELTEK.PROJ_BURD_SUM
	WHERE  FY_CD =  @FY_CD
	AND	   PD_NO <= @PD_NO
	AND	   PD_NO >= 1
	AND	   LEFT(ORG_ID,2)=@DIVISION

	SELECT @GL_BURDEN_RECOVERY_TOTAL =  ISNULL(SUM(AMT),0)  FROM IMAPS.DELTEK.GL_POST_SUM
	WHERE FY_CD =  @FY_CD 
	AND	  PD_NO <= @PD_NO
	AND	  PD_NO >= 1
	AND	   LEFT(ORG_ID,2)=@DIVISION
	AND ACCT_ID LIKE 'PA%CR' AND ACCT_ID <> 'PA-70-CR'

	IF @PL_BURDEN_TOTAL <> @GL_BURDEN_RECOVERY_TOTAL
	BEGIN
		SELECT @PL_GL_BALANCE_MAJOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_MAJOR'

		SELECT @PL_GL_BALANCE_MINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_MINOR'

		SELECT @PL_GL_BALANCE_SUBMINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_SUBMINOR'

		SELECT @PL_GL_BALANCE_CONTRACT = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_CONTRACT'

		 INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
		([DIVISION], [CLS_MAJOR], [CLS_MINOR], [CLS_SUB_MINOR], 
		[DOLLAR_AMT], [DESCRIPTION2],  [CONTRACT_NUM])
		VALUES(@DIVISION, @PL_GL_BALANCE_MAJOR, @PL_GL_BALANCE_MINOR,@PL_GL_BALANCE_SUBMINOR, -(@PL_BURDEN_TOTAL + @GL_BURDEN_RECOVERY_TOTAL), 
		'VARIANCE -(PA%CR + PL) ', @PL_GL_BALANCE_CONTRACT) 
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END		
		
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER



	--SAME THING FOR 1M
	SET @DIVISION='1M'
	-- CALCULATE DIFFERENCE BETWEEN PL AND GL BURDEN AND PUT IT AS SEPARATE ROW TO CLS DOWN TABLE.
	SELECT @PL_BURDEN_TOTAL =  ISNULL(SUM( SUB_ACT_AMT ),0)  FROM IMAPS.DELTEK.PROJ_BURD_SUM
	WHERE  FY_CD =  @FY_CD
	AND	   PD_NO <= @PD_NO
	AND	   PD_NO >= 1
	AND	   LEFT(ORG_ID,2)=@DIVISION

	SELECT @GL_BURDEN_RECOVERY_TOTAL =  ISNULL(SUM(AMT),0)  FROM IMAPS.DELTEK.GL_POST_SUM
	WHERE FY_CD =  @FY_CD 
	AND	  PD_NO <= @PD_NO
	AND	  PD_NO >= 1
	AND	   LEFT(ORG_ID,2)=@DIVISION
	AND ACCT_ID LIKE 'PA%CR' AND ACCT_ID <> 'PA-70-CR'

	IF @PL_BURDEN_TOTAL <> @GL_BURDEN_RECOVERY_TOTAL
	BEGIN
		SELECT @PL_GL_BALANCE_MAJOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_MAJOR'

		SELECT @PL_GL_BALANCE_MINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_MINOR'

		SELECT @PL_GL_BALANCE_SUBMINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_SUBMINOR'

		SELECT @PL_GL_BALANCE_CONTRACT = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_PL_GL_BALANCE_CONTRACT'

		 INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
		([DIVISION], [CLS_MAJOR], [CLS_MINOR], [CLS_SUB_MINOR], 
		[DOLLAR_AMT], [DESCRIPTION2],  [CONTRACT_NUM])
		VALUES(@DIVISION, @PL_GL_BALANCE_MAJOR, @PL_GL_BALANCE_MINOR,@PL_GL_BALANCE_SUBMINOR, -(@PL_BURDEN_TOTAL + @GL_BURDEN_RECOVERY_TOTAL), 
		'VARIANCE -(PA%CR + PL) ', @PL_GL_BALANCE_CONTRACT) 
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END		
		
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	
	PRINT '14.	MANUFACTURED FILE BALANCE TRANSACTION'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT FILE BALANCE TRANSACTION'
	SET @error_msg_placeholder2 = 'INTO XX_CLS_DOWN_THIS_MONTH_YTD'

	DECLARE @CLOSING_TOTAL DECIMAL(14,2),
	@BALANCE_MAJOR VARCHAR(3),
	@BALANCE_MINOR VARCHAR(4),
	@BALANCE_SUBMINOR VARCHAR(4),
	@BALANCE_CONTRACT VARCHAR(5)

	--FOR 16
	SET @DIVISION = '16'

	SELECT @CLOSING_TOTAL = ISNULL(SUM(DOLLAR_AMT),0)
	FROM XX_CLS_DOWN_THIS_MONTH_YTD
	WHERE DIVISION = @DIVISION
	--CR6297
	OR DIVISION='1P'
	--CR8763
	OR DIVISION='2G'



	-- CALCULATE FINAL BALANCE  AND PUT IT AS SEPARATE ROW TO CLS DOWN TABLE
	IF  @CLOSING_TOTAL <> 0 AND @CLOSING_TOTAL IS NOT NULL
	BEGIN
		SELECT @BALANCE_MAJOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_MAJOR'

		SELECT @BALANCE_MINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_MINOR'

		SELECT @BALANCE_SUBMINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_SUBMINOR'

		SELECT @BALANCE_CONTRACT = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_CONTRACT'

		INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
		([DIVISION], [CLS_MAJOR], [CLS_MINOR], [CLS_SUB_MINOR], 		[DOLLAR_AMT], [DESCRIPTION2],  [CONTRACT_NUM])
		VALUES(@DIVISION, @BALANCE_MAJOR, @BALANCE_MINOR,@BALANCE_SUBMINOR, -1*@CLOSING_TOTAL, 
		'BALANCING RECORD', @BALANCE_CONTRACT)
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	--NOW FOR 1M
	
SET @DIVISION = '1M'

	SELECT @CLOSING_TOTAL = ISNULL(SUM(DOLLAR_AMT),0)
	FROM XX_CLS_DOWN_THIS_MONTH_YTD
	WHERE DIVISION = @DIVISION

	-- CALCULATE CALCULATE FINAL BALANCE  AND PUT IT AS SEPARATE ROW TO CLS DOWN TABLE
	IF  @CLOSING_TOTAL <> 0 AND @CLOSING_TOTAL IS NOT NULL
	BEGIN
		SELECT @BALANCE_MAJOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_MAJOR'

		SELECT @BALANCE_MINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_MINOR'

		SELECT @BALANCE_SUBMINOR = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_SUBMINOR'

		SELECT @BALANCE_CONTRACT = PARAMETER_VALUE
		FROM XX_PROCESSING_PARAMETERS
		WHERE INTERFACE_NAME_CD = 'CLS' AND
			PARAMETER_NAME = @DIVISION+'_'+'DFLT_BALANCE_CONTRACT'

		INSERT INTO XX_CLS_DOWN_THIS_MONTH_YTD
		([DIVISION], [CLS_MAJOR], [CLS_MINOR], [CLS_SUB_MINOR], 		[DOLLAR_AMT], [DESCRIPTION2],  [CONTRACT_NUM])
		VALUES(@DIVISION, @BALANCE_MAJOR, @BALANCE_MINOR,@BALANCE_SUBMINOR, -1*@CLOSING_TOTAL, 
		'BALANCING RECORD', @BALANCE_CONTRACT)
		
		IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	END
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER




	PRINT '15.	UPDATE CUSTOMER CMR DATA'

	
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'WITH CUSTOMER CMR DATA FOR PROJECTS ABOVE BILLING LEVEL'

	--begin CR4563
	PRINT 'PROCESS CHANGES FOR ABOVE BILLING LEVEL - inactivate'
	UPDATE XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL
	SET ACTIVE_FL='N',
		ACTIVE_DATE=getdate()
	FROM XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL cls
	WHERE 
	--no longer active for project
	0 = (select count(1) from imaps.deltek.proj_cust_setup where left(proj_id, len(cls.proj_id))=cls.proj_id and addr_dc=cls.addr_dc)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	
	PRINT 'UPDATE CMR FOR ABOVE BILLING LEVEL - part 1'
	update XX_CLS_DOWN_THIS_MONTH_YTD
	set customer_num=pc.addr_dc
	from 
	XX_CLS_DOWN_THIS_MONTH_YTD cls
	inner join
	XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL pc
	on
	(cls.imaps_proj_id=pc.proj_id
	 and
	 pc.active_fl='Y'
	 and
	 cls.customer_num is null)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	PRINT 'INSERT new XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL'
	insert into XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL
	(CREATE_USER, CREATE_DATE, UPDATE_USER, UPDATE_DATE, PROJ_ID, ADDR_DC, ACTIVE_FL, ACTIVE_DATE)
	select suser_name(), getdate(), suser_name(), getdate(), 
	 imaps_proj_id, 

	 (	 select top 1 pcs.addr_dc
		 from imaps.deltek.proj_cust_setup pcs
			inner join
			xx_imaps_cmr_stg cmr
		  on (pcs.addr_dc=cmr.i_cust_entity)
		  where left(proj_id, len(cls.imaps_proj_id)) = cls.imaps_proj_id
	 ),
	 'Y', getdate()
	from XX_CLS_DOWN_THIS_MONTH_YTD  cls
	where
	--proj_id is not null
	imaps_proj_id is not null
	and
	--direct project (to reduce table scan)
	left(imaps_proj_id,1)='D'
	and
	--customer is null
	customer_num is null
	and
	--customer returned is not null
	0 <> (	 select count(1)
		 from imaps.deltek.proj_cust_setup pcs
			inner join
			xx_imaps_cmr_stg cmr
		  on (pcs.addr_dc=cmr.i_cust_entity)
		  where left(proj_id, len(cls.imaps_proj_id)) = cls.imaps_proj_id
		)
	group by 
	imaps_proj_id

	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	PRINT 'UPDATE CMR FOR ABOVE BILLING LEVEL - part 2'
	update XX_CLS_DOWN_THIS_MONTH_YTD
	set customer_num=pc.addr_dc
	from 
	XX_CLS_DOWN_THIS_MONTH_YTD cls
	inner join
	XX_CLS_DOWN_PROJ_CUST_ABOVE_BILLING_LEVEL pc
	on
	(cls.imaps_proj_id=pc.proj_id
	 and
	 pc.active_fl='Y'
	 and
	 cls.customer_num is null)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
	--end CR4563




	PRINT 'UPDATE CMR DATA - standard'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'WITH CUSTOMER CMR DATA'
	
	DECLARE @DEFAULTCUSTOMERNUMBER VARCHAR(10)
	SELECT @DEFAULTCUSTOMERNUMBER = PARAMETER_VALUE FROM XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'DFLT_CUSTOMER_NUM'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET MARKETING_OFFICE = Y.I_MKTG_OFF,
	CONSOLIDATED_REV_BRANCH_OFFICE = Y.I_PRIMRY_SVC_OFF,
	INDUSTRY = Y.C_ESTAB_SIC,
	ENTERPRISE_NUM_CD = Y.I_ENT,
	BUSINESS_AREA = Y.A_LEVEL_1_VALUE,
	MARKETING_AREA = 'TD'
	FROM XX_IMAPS_CMR_STG Y
	WHERE Y.I_CUST_ENTITY =  CUSTOMER_NUM 
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER





	--begin CR4563
	--IF CMR number was dropped from IMAPS feed
	--use previous month's CMR values
	PRINT 'UPDATE CMR DATA - customer number dropped from CMR feed'

	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'WITH CUSTOMER CMR DATA FOR NUMBERS THAT DROPPED FROM CMR FEED'

	truncate table XX_CLS_DOWN_LAST_MONTH_CUSTOMER_DATA

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	insert into XX_CLS_DOWN_LAST_MONTH_CUSTOMER_DATA
	(CUSTOMER_NUM, MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE, INDUSTRY, ENTERPRISE_NUM_CD, BUSINESS_AREA, MARKETING_AREA)
	select CUSTOMER_NUM, MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE, INDUSTRY, ENTERPRISE_NUM_CD, BUSINESS_AREA, MARKETING_AREA
	from XX_CLS_DOWN_LAST_MONTH_YTD
	where CUSTOMER_NUM IS NOT NULL
	and	isnull(MARKETING_AREA,'') = 'TD'
	group by CUSTOMER_NUM, MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE, INDUSTRY, ENTERPRISE_NUM_CD, BUSINESS_AREA, MARKETING_AREA

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	
	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET MARKETING_OFFICE = LAST_MONTH.MARKETING_OFFICE,
	CONSOLIDATED_REV_BRANCH_OFFICE = LAST_MONTH.CONSOLIDATED_REV_BRANCH_OFFICE,
	INDUSTRY = LAST_MONTH.INDUSTRY,
	ENTERPRISE_NUM_CD = LAST_MONTH.ENTERPRISE_NUM_CD,
	BUSINESS_AREA = LAST_MONTH.BUSINESS_AREA,
	MARKETING_AREA = LAST_MONTH.MARKETING_AREA
	FROM 
	XX_CLS_DOWN_THIS_MONTH_YTD THIS_MONTH
	INNER JOIN
	XX_CLS_DOWN_LAST_MONTH_CUSTOMER_DATA LAST_MONTH
	ON
	(
		THIS_MONTH.CUSTOMER_NUM IS NOT NULL
		AND
		THIS_MONTH.CUSTOMER_NUM=LAST_MONTH.CUSTOMER_NUM
		AND
		(THIS_MONTH.MARKETING_AREA <> 'TD' or THIS_MONTH.MARKETING_AREA IS NULL)
	)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	PRINT 'UPDATE CMR DATA - true defaults'
	--end CR4563


	--for 16
	SET @DIVISION = '16'
	--DECLARE @DEFAULTCUSTOMERNUMBER VARCHAR(10)
	SELECT @DEFAULTCUSTOMERNUMBER = PARAMETER_VALUE FROM XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CUSTOMER_NUM'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET CUSTOMER_NUM = @DEFAULTCUSTOMERNUMBER
	WHERE 
		DIVISION = @DIVISION
		AND
		CUSTOMER_NUM IS NOT NULL AND
		(MARKETING_AREA <> 'TD' or MARKETING_AREA IS NULL)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
			
	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CUSTOMER_NUM =  @DEFAULTCUSTOMERNUMBER
	WHERE CUSTOMER_NUM IS NULL 
	AND DIVISION = @DIVISION
	/*maybe need this - ask Rick
	AND
	LEFT(IMAPS_PROJ_ID, 4) IN ('MOSS','BOPP','IINT', 'DTOP') */
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	--for 1M
	SET @DIVISION = '1M'
	--DECLARE @DEFAULTCUSTOMERNUMBER VARCHAR(10)
	SELECT @DEFAULTCUSTOMERNUMBER = PARAMETER_VALUE FROM XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = @DIVISION+'_'+'DFLT_CUSTOMER_NUM'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET CUSTOMER_NUM = @DEFAULTCUSTOMERNUMBER
	WHERE 
		DIVISION = @DIVISION
		AND
		CUSTOMER_NUM IS NOT NULL AND
		(MARKETING_AREA <> 'TD' or MARKETING_AREA IS NULL)
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
			
	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET 
	CUSTOMER_NUM =  @DEFAULTCUSTOMERNUMBER
	WHERE CUSTOMER_NUM
 IS NULL 
	AND DIVISION = @DIVISION
	/*maybe need this - ask Rick
	AND
	LEFT(IMAPS_PROJ_ID, 4) IN ('MOSS','BOPP','IINT', 'DTOP') */
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER




	
	PRINT '16.	UPDATE DESCRIPTION2'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_THIS_MONTH_YTD'
	SET @error_msg_placeholder2 = 'WITH IMAPS ACCOUNT DESCRIPTION'

	UPDATE XX_CLS_DOWN_THIS_MONTH_YTD
	SET DESCRIPTION2 = LEFT(ISNULL(ACCT.ACCT_NAME, CLS.DESCRIPTION2), 30)
	FROM XX_CLS_DOWN_THIS_MONTH_YTD CLS
	LEFT JOIN
	IMAPS.DELTEK.ACCT ACCT
	ON
	(CLS.IMAPS_ACCT = ACCT.ACCT_ID)

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	

	
	
	PRINT '18.	DELETE ZERO DOLLAR TRANSACTIONS'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'DELETE ZERO DOLLAR TRANSACTION'
	SET @error_msg_placeholder2 = 'FROM XX_CLS_DOWN_THIS_MONTH_YTD'

	DELETE FROM XX_CLS_DOWN_THIS_MONTH_YTD
	WHERE DOLLAR_AMT = .00
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	/*******
	WE NOW HAVE CURRENT MONTH YTD IMAGE 

	TIME FOR NEW DELTA LOGIC TO POPULATE XX_CLS_DOWN
	HERE IS A USEFUL QUERY FOR GETTING COLUMN NAMES FOR INSERT STATEMENT AND JOIN:
	SELECT 'AND THIS.'+COLUMN_NAME+' = LAST.'+COLUMN_NAME
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = 'XX_CLS_DOWN_THIS_MONTH_YTD'
	ORDER BY ORDINAL_POSITION	

	********/


	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER	

	PRINT '20.	ARCHIVE YTD IMAGE'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT INTO XX_CLS_DOWN_YTD_ARCHIVE'
	SET @error_msg_placeholder2 = 'FROM XX_CLS_DOWN_THIS_MONTH_YTD'

	INSERT INTO XX_CLS_DOWN_YTD_ARCHIVE
	(STATUS_RECORD_NUM,
	CLS_MAJOR,
	CLS_MINOR,
	CLS_SUB_MINOR,
	IMAPS_ACCT,
	IMAPS_PROJ_ID,
	L1_PROJ_SEG_ID,
	DOLLAR_AMT,
	GA_AMT,
	OVERHEAD_AMT,
	CONTRACT_NUM,
	IGS_PROJ,
	SERVICE_OFFERING,
	CUSTOMER_NUM,
	MACHINE_TYPE_CD,
	PRODUCT_ID,
	DESCRIPTION2,
	BUSINESS_AREA,
	MARKETING_AREA,
	MARKETING_OFFICE,
	CONSOLIDATED_REV_BRANCH_OFFICE,
	INDUSTRY,
	ENTERPRISE_NUM_CD,
	DIVISION)
	SELECT 
	@IN_STATUS_RECORD_NUM,
	CLS_MAJOR,
	CLS_MINOR,
	CLS_SUB_MINOR,
	IMAPS_ACCT,
	IMAPS_PROJ_ID,
	L1_PROJ_SEG_ID,
	DOLLAR_AMT,
	GA_AMT,
	OVERHEAD_AMT,
	CONTRACT_NUM,
	IGS_PROJ,
	SERVICE_OFFERING,
	CUSTOMER_NUM,
	MACHINE_TYPE_CD,
	PRODUCT_ID,
	DESCRIPTION2,
	BUSINESS_AREA,
	MARKETING_AREA,
	MARKETING_OFFICE,
	CONSOLIDATED_REV_BRANCH_OFFICE,
	INDUSTRY,
	ENTERPRISE_NUM_CD,
	DIVISION
	FROM XX_CLS_DOWN_THIS_MONTH_YTD

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	-- PRINT '20.	THIS STEP NO LONGER EXISTS - DR7888'
/************* THIS IS FOR DIVISION 16 ONLY *********************/

	PRINT '21. APPLY REPORTING PROJECT PROJ_ID SUBSTITUTIONS'
	
	PRINT '21(A) UPDATE ARCHIVE TO SHOW REPORTING PROJECTS FROM UDEF LABEL KEY = 60'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_YTD_ARCHIVE'
	SET @error_msg_placeholder2 = 'USING XX_REV_LVL_UDEF_PROJ_VW'	
	
	
	update IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE 
	set IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.GENL_ID = VW.GENL_ID,
	IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.UDEF_TXT = VW.UDEF_TXT,
	IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.FULL_PROJ_ID = VW.FULL_PROJECT
	FROM IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE YA, 
	IMAPSSTG.DBO.XX_REV_LVL_UDEF_PROJ_VW VW
	WHERE YA.IMAPS_PROJ_ID = VW.GENL_ID
	AND YA.IMAPS_PROJ_ID IS NOT NULL
	AND YA.STATUS_RECORD_NUM = @in_STATUS_RECORD_NUM
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER	

	PRINT '21(B) UPDATE ARCHIVE WHERE NO MATCHING REPORTING PROJECTS FROM UDEF LABEL KEY = 60'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_YTD_ARCHIVE'
	SET @error_msg_placeholder2 = 'USING DEFAULT REPORTING PROJECT'	
	
	update IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE 
	set IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.GENL_ID = 'NO MATCH',
	IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.UDEF_TXT = RIGHT(@DFLT_PROJ,4),
	IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE.FULL_PROJ_ID = @DFLT_PROJ
	FROM IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE YA, 
	IMAPSSTG.DBO.XX_REV_LVL_UDEF_PROJ_VW VW
	WHERE YA.GENL_ID IS NULL
	AND YA.IMAPS_PROJ_ID IS NOT NULL
	AND YA.STATUS_RECORD_NUM = @in_STATUS_RECORD_NUM			
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER	

	PRINT '21(C) UPDATE YTD IMAPS_PROJ_ID WITH REPORTING PROJECT SAVED IN ARCHIVE'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN_YTD'
	SET @error_msg_placeholder2 = 'USING REPORTING PROJECT FROM ARCHIVE'		



    -- UPDATE THE TABLE
    -- CHANGE THE IMAPS_PROJ_ID TO THE FULL REPORTING PROJECT ID
    -- CHANGE THE IGS_PROJ TO THE LAST FOR OF THE REPORTING PROJECT
    
	update IMAPSSTG.DBO.XX_CLS_DOWN_THIS_MONTH_YTD 
	set IMAPSSTG.DBO.XX_CLS_DOWN_THIS_MONTH_YTD.IMAPS_PROJ_ID = YA.FULL_PROJ_ID,
	IMAPSSTG.DBO.XX_CLS_DOWN_THIS_MONTH_YTD.IGS_PROJ = RIGHT(YA.FULL_PROJ_ID,4)
	FROM IMAPSSTG.DBO.XX_CLS_DOWN_THIS_MONTH_YTD YD, 
	IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE YA
	WHERE YD.IMAPS_PROJ_ID = YA.IMAPS_PROJ_ID
	AND YA.STATUS_RECORD_NUM IN (SELECT MAX(STATUS_RECORD_NUM) FROM IMAPSSTG.DBO.XX_CLS_DOWN_YTD_ARCHIVE)
	AND YD.IMAPS_PROJ_ID IS NOT NULL
		
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

/************* THIS IS FOR DIVISION 16 ONLY *********************/
	
	PRINT '22
.	CALCULATE DIFFERENCE BETWEEN THIS MONTH AND LAST MONTH VALUES'
	/* VALUES THAT HAVE CHANGED SINCE THE PREVIOUS MONTH 
	OR VALUES THAT DID NOT EXIST IN THE PREVIOUS MONTH 
	CALCULATION: NEGATE LAST_MONTH_YTD, UNION WITH THIS_MONTH_YTD AND SUM AND GROUP BOTH
	*/

	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT INTO XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'FROM SIMPLE YTD DIFFERENCE'
	
INSERT INTO XX_CLS_DOWN
	( CLS_MAJOR, CLS_MINOR, CLS_SUB_MINOR,
	  IMAPS_ACCT, IMAPS_PROJ_ID, L1_PROJ_SEG_ID,
	  DOLLAR_AMT, --GA_AMT, OVERHEAD_AMT,
	  CONTRACT_NUM, IGS_PROJ, SERVICE_OFFERING,
	  CUSTOMER_NUM, MACHINE_TYPE_CD, PRODUCT_ID,
	  DESCRIPTION2, BUSINESS_AREA, MARKETING_AREA,
	  MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE,
	  INDUSTRY, ENTERPRISE_NUM_CD, DIVISION )
-- SELECT sum(DOLLAR) FROM		
SELECT CLS_MAJOR, CLS_MINOR, CLS_SUB_MINOR,
	  IMAPS_ACCT, IMAPS_PROJ_ID, L1_PROJ_SEG_ID,
	  AMT, --GA_AMT, OVERHEAD_AMT,
	  CONTRACT_NUM, IGS_PROJ, SERVICE_OFFERING,
	  CUSTOMER_NUM, MACHINE_TYPE_CD, PRODUCT_ID,
	  DESCRIPTION2, BUSINESS_AREA, MARKETING_AREA,
	  MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE,
	  INDUSTRY, ENTERPRISE_NUM_CD, DIVISION 
FROM 
(SELECT		
  cls_major,
  cls_minor,
  cls_sub_minor,
  imaps_acct,
  imaps_proj_id,
  l1_proj_seg_id,
  SUM(dollar_amt) AS AMT,
  --SUM(ga_amt),
  --SUM(overhead_amt),
  contract_num,
  igs_proj,
  service_offering,
  customer_num,
  machine_type_cd,
  product_id,
  description2,
  business_area,
  marketing_area,
  marketing_office,
  consolidated_rev_branch_office,
  industry,
  enterprise_num_cd,
  division
FROM 
(select
  cls_major,
  cls_minor,
  cls_sub_minor,
  imaps_acct,
  imaps_proj_id,
  l1_proj_seg_id,
  dollar_amt,
  ga_amt,
  overhead_amt,
  contract_num,
  igs_proj,
  service_offering,
  customer_num,
  machine_type_cd,
  product_id,
  description2,
  business_area,
  marketing_area,
  marketing_office,
  consolidated_rev_branch_office,
  industry,
  enterprise_num_cd,
  division
from IMAPSStg.dbo.XX_CLS_DOWN_THIS_MONTH_YTD
union ALL
select
  cls_major,
  cls_minor,
  cls_sub_minor,
  imaps_acct,
  imaps_proj_id,
  l1_proj_seg_id,
  -1*dollar_amt,
  -1*ga_amt,
  -1*overhead_amt,
  contract_num,
  igs_proj,
  service_offering,
  customer_num,
  machine_type_cd,
  product_id,
  description2,
  business_area,
  marketing_area,
  marketing_office,
  consolidated_rev_branch_office,
  industry,
  enterprise_num_cd,
  division
from IMAPSStg.dbo.XX_CLS_DOWN_LAST_MONTH_YTD)A
GROUP BY 
  cls_major,
  cls_minor,
  cls_sub_minor,
  imaps_acct,
  imaps_proj_id,
  l1_proj_seg_id,
  contract_num,
  igs_proj,
  service_offering,
  customer_num,
  machine_type_cd,
  product_id,
  description2,
  business_area,
  marketing_area,
  marketing_office,
  consolidated_rev_branch_office,
  industry,
  enterprise_num_cd,
  division)Z
where AMT <> 0


	
	
	
/*
***********************************************************************************************************************************************************
    REMOVED BECAUSE OF DR7888
	PRINT '20.	CALCULATE SIMPLE DIFFERENCE BETWEEN THIS MONTH AND LAST MONTH VALUES'
	 VALUES THAT HAVE CHANGED SINCE THE PREVIOUS MONTH 
	OR VALUES THAT DID NOT EXIST IN THE PREVIOUS MONTH 

	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT INTO XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'FROM SIMPLE YTD DIFFERENCE'

	INSERT INTO XX_CLS_DOWN
	( CLS_MAJOR, CLS_MINOR, CLS_SUB_MINOR,
	  IMAPS_ACCT, IMAPS_PROJ_ID, L1_PROJ_SEG_ID,
	  DOLLAR_AMT, --GA_AMT, OVERHEAD_AMT,
	  CONTRACT_NUM, IGS_PROJ, SERVICE_OFFERING,
	  CUSTOMER_NUM, MACHINE_TYPE_CD, PRODUCT_ID,
	  DESCRIPTION2, BUSINESS_AREA, MARKETING_AREA,
	  MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE,
	  INDUSTRY, ENTERPRISE_NUM_CD, DIVISION )
	SELECT  
	  TH
IS.CLS_MAJOR, THIS.CLS_MINOR, THIS.CLS_SUB_MINOR,
	  THIS.IMAPS_ACCT, THIS.IMAPS_PROJ_ID, THIS.L1_PROJ_SEG_ID,
	  THIS.DOLLAR_AMT - ISNULL(LAST.DOLLAR_AMT, .00), --GA_AMT, OVERHEAD_AMT,
	  THIS.CONTRACT_NUM, THIS.IGS_PROJ, THIS.SERVICE_OFFERING,
	  THIS.CUSTOMER_NUM, THIS.MACHINE_TYPE_CD, THIS.PRODUCT_ID,
	  THIS.DESCRIPTION2, THIS.BUSINESS_AREA, THIS.MARKETING_AREA,
	  THIS.MARKETING_OFFICE, THIS.CONSOLIDATED_REV_BRANCH_OFFICE,
	  THIS.INDUSTRY, THIS.ENTERPRISE_NUM_CD, THIS.DIVISION
	FROM 
	XX_CLS_DOWN_THIS_MONTH_YTD THIS
	LEFT JOIN
	XX_CLS_DOWN_LAST_MONTH_YTD LAST
	ON
	( 
			ISNULL(THIS.DIVISION,'') = ISNULL(LAST.DIVISION, '')
		AND THIS.CLS_MAJOR = LAST.CLS_MAJOR
		AND THIS.CLS_MINOR = LAST.CLS_MINOR
		AND THIS.CLS_SUB_MINOR = LAST.CLS_SUB_MINOR
		AND ISNULL(THIS.IMAPS_ACCT, THIS.DESCRIPTION2) = ISNULL(LAST.IMAPS_ACCT, LAST.DESCRIPTION2)
		AND ISNULL(THIS.IMAPS_PROJ_ID, 'NULL_MATCH') = ISNULL(LAST.IMAPS_PROJ_ID, 'NULL_MATCH')
		--AND ISNULL(THIS.L1_PROJ_SEG_ID, 'NULL_MATCH') = ISNULL(LAST.L1_PROJ_SEG_ID, 'NULL_MATCH')
		--AND THIS.DOLLAR_AMT = LAST.DOLLAR_AMT
		--AND THIS.GA_AMT = LAST.GA_AMT
		--AND THIS.OVERHEAD_AMT = LAST.OVERHEAD_AMT
		AND ISNULL(THIS.CONTRACT_NUM, 'NULL_MATCH') = ISNULL(LAST.CONTRACT_NUM, 'NULL_MATCH')
		AND ISNULL(THIS.IGS_PROJ, 'NULL_MATCH') = ISNULL(LAST.IGS_PROJ, 'NULL_MATCH')
		AND ISNULL(THIS.SERVICE_OFFERING, 'NULL_MATCH') = ISNULL(LAST.SERVICE_OFFERING, 'NULL_MATCH')
		AND ISNULL(THIS.MACHINE_TYPE_CD, 'NULL_MATCH') = ISNULL(LAST.MACHINE_TYPE_CD, 'NULL_MATCH')
		AND ISNULL(THIS.PRODUCT_ID, 'NULL_MATCH') = ISNULL(LAST.PRODUCT_ID, 'NULL_MATCH')
		AND ISNULL(THIS.CUSTOMER_NUM, 'NULL_MATCH') = ISNULL(LAST.CUSTOMER_NUM, 'NULL_MATCH')
		/- 
		AND THIS.BUSINESS_AREA = LAST.BUSINESS_AREA
		AND THIS.MARKETING_AREA = LAST.MARKETING_AREA
		AND THIS.MARKETING_OFFICE = LAST.MARKETING_OFFICE
		AND THIS.CONSOLIDATED_REV_BRANCH_OFFICE = LAST.CONSOLIDATED_REV_BRANCH_OFFICE
		AND THIS.INDUSTRY = LAST.INDUSTRY
		AND THIS.ENTERPRISE_NUM_CD = LAST.ENTERPRISE_NUM_CD -/
	)
	WHERE THIS.DOLLAR_AMT - ISNULL(LAST.DOLLAR_AMT, .00) <> .00

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	PRINT '21.	CALCULATE COMPLEX DIFFERENCE BETWEEN THIS MONTH AND LAST MONTH VALUES'
	/- VALUES IN LAST MONTH YTD THAT NEED TO BE REVERSED OUT (ZEROED)
	   BECAUSE THEY ARE NOT AT ALL IN THIS MONTH YTD -/
	   
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'INSERT INTO XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'FROM COMPLEX YTD DIFFERENCE'	
	INSERT INTO XX_CLS_DOWN
	( CLS_MAJOR, CLS_MINOR, CLS_SUB_MINOR,
	  IMAPS_ACCT, IMAPS_PROJ_ID, L1_PROJ_SEG_ID,
	  DOLLAR_AMT, --GA_AMT, OVERHEAD_AMT,
	  CONTRACT_NUM, IGS_PROJ, SERVICE_OFFERING,
	  CUSTOMER_NUM, MACHINE_TYPE_CD, PRODUCT_ID,
	  DESCRIPTION2, BUSINESS_AREA, MARKETING_AREA,
	  MARKETING_OFFICE, CONSOLIDATED_REV_BRANCH_OFFICE,
	  INDUSTRY, ENTERPRISE_NUM_CD, DIVISION )
	SELECT  
	  LAST.CLS_MAJOR, LAST.CLS_MINOR, LAST.CLS_SUB_MINOR,
	  LAST.IMAPS_ACCT, LAST.IMAPS_PROJ_ID, LAST.L1_PROJ_SEG_ID,
	  -1.0 * LAST.DOLLAR_AMT, --GA_AMT, OVERHEAD_AMT,
	  LAST.CONTRACT_NUM, LAST.IGS_PROJ, LAST.SERVICE_OFFERING,
	  LAST.CUSTOMER_NUM, LAST.MACHINE_TYPE_CD, LAST.PRODUCT_ID,
	  LAST.DESCRIPTION2, LAST.BUSINESS_AREA, LAST.MARKETING_AREA,
	  LAST.MARKETING_OFFICE, LAST.CONSOLIDATED_REV_BRANCH_OFFICE,
	  LAST.INDUSTRY, LAST.ENTERPRISE_NUM_CD, LAST.DIVISION
	FROM 
	XX_CLS_DOWN_LAST_MONTH_YTD LAST
	WHERE
	0 = 
		(SELECT COUNT(1)
		 FROM XX_CLS_DOWN_THIS_MONTH_YTD THIS
		 WHERE 	
				ISNULL(THIS.DIVISION,'') = ISNULL(LAST.DIVISION, '')
			AND	THIS.CLS_MAJOR = LAST.CLS_MAJOR
			AND THIS.CLS_MINOR = LAST.CLS_MINOR
			AND THIS.CLS_SUB_MINOR = LAST.CLS_SUB_MINOR
			AND ISNULL(THIS.IMAPS_ACCT, THIS.DESCRIPTION2) = ISNULL(LAST.IMAPS_ACCT, LAST.DESCRIPTION2)
			AND ISNULL(THIS.IMAPS_PROJ_ID, 'NULL_MATCH') = ISNULL(LAST.IMAPS_PROJ_ID, 'NULL_MATCH')
			--AND ISNULL(THIS.L1_PROJ_SEG_ID, 'NULL_MATCH') = ISNU
LL(LAST.L1_PROJ_SEG_ID, 'NULL_MATCH')
			--AND THIS.DOLLAR_AMT = LAST.DOLLAR_AMT
			--AND THIS.GA_AMT = LAST.GA_AMT
			--AND THIS.OVERHEAD_AMT = LAST.OVERHEAD_AMT
			AND ISNULL(THIS.CONTRACT_NUM, 'NULL_MATCH') = ISNULL(LAST.CONTRACT_NUM, 'NULL_MATCH')
			AND ISNULL(THIS.IGS_PROJ, 'NULL_MATCH') = ISNULL(LAST.IGS_PROJ, 'NULL_MATCH')
			AND ISNULL(THIS.SERVICE_OFFERING, 'NULL_MATCH') = ISNULL(LAST.SERVICE_OFFERING, 'NULL_MATCH')
			AND ISNULL(THIS.MACHINE_TYPE_CD, 'NULL_MATCH') = ISNULL(LAST.MACHINE_TYPE_CD, 'NULL_MATCH')
			AND ISNULL(THIS.PRODUCT_ID, 'NULL_MATCH') = ISNULL(LAST.PRODUCT_ID, 'NULL_MATCH')
			AND ISNULL(THIS.CUSTOMER_NUM, 'NULL_MATCH') = ISNULL(LAST.CUSTOMER_NUM, 'NULL_MATCH')
			/- 
			AND THIS.BUSINESS_AREA = LAST.BUSINESS_AREA
			AND THIS.MARKETING_AREA = LAST.MARKETING_AREA
			AND THIS.MARKETING_OFFICE = LAST.MARKETING_OFFICE
			AND THIS.CONSOLIDATED_REV_BRANCH_OFFICE = LAST.CONSOLIDATED_REV_BRANCH_OFFICE
			AND THIS.INDUSTRY = LAST.INDUSTRY
			AND THIS.ENTERPRISE_NUM_CD = LAST.ENTERPRISE_NUM_CD -/
		)
***********************************************************************************************************************************************************
*/
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER


	PRINT '23.	PERFORM PROJECT CODE DEFAULTING'

	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'WITH DEFAULT PROJECT CODES'

	UPDATE XX_CLS_DOWN
	SET IGS_PROJ = (SELECT TOP 1 IGS_PROJ FROM XX_CLS_DOWN
					WHERE 
					IGS_PROJ <> ' ' 
					AND IGS_PROJ IS NOT NULL
					AND IMAPS_ACCT IS NOT NULL
					AND IMAPS_ACCT = @rev_acct_id --'30-01-01'
					AND IMAPS_PROJ_ID LIKE THIS.IMAPS_PROJ_ID + '%'
					ORDER BY DOLLAR_AMT ASC) --MOST NEGATIVE IS GREATEST REVENUE
	FROM XX_CLS_DOWN THIS
	WHERE IGS_PROJ IS NULL OR IGS_PROJ = ' '

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER
		
	PRINT '23.1563'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'PROJ_ABBRV_CD'
	
	UPDATE XX_CLS_DOWN
	SET IGS_PROJ = (SELECT TOP 1 PROJ_ABBRV_CD FROM IMAPS.DELTEK.PROJ
					WHERE 
					PROJ_ABBRV_CD <> ' ' 
					AND PROJ_ID LIKE THIS.IMAPS_PROJ_ID + '%')
	FROM XX_CLS_DOWN THIS
	WHERE IGS_PROJ IS NULL OR IGS_PROJ = ' '

	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

	DECLARE
	@IGSPROJCSIDFLT VARCHAR(7),
	@IGSPROJBTODFLT VARCHAR(7),
	@IGSPROJWEBDFLT VARCHAR(7),
	@IGSPROJ_FOR16 VARCHAR(7),
	@IGSPROJ_FOR1M VARCHAR(7)


	SELECT @IGSPROJCSIDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'IGS_CSI_PROJ_ID'

	SELECT @IGSPROJBTODFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'IGS_BTO_PROJ_ID'

	SELECT @IGSPROJWEBDFLT = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = 'IGS_WEB_PROJ_ID'

	SELECT @IGSPROJ_FOR16 = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = '16_DFLT_IGS_PROJ'

	SELECT @IGSPROJ_FOR1M = PARAMETER_VALUE FROM  XX_PROCESSING_PARAMETERS 
		WHERE INTERFACE_NAME_CD = 'CLS' AND PARAMETER_NAME = '1M_DFLT_IGS_PROJ'

	PRINT '23.1602'
	SET @IMAPS_error_number = 204 -- Attempt to %1 %2 failed.
	SET @error_msg_placeholder1 = 'UPDATE XX_CLS_DOWN'
	SET @error_msg_placeholder2 = 'SERVICE OFFERING'

		
	UPDATE XX_CLS_DOWN
	SET IGS_PROJ = 
	CASE 
	WHEN DIVISION='16' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ')  AND SERVICE_OFFERING = 'CSI' THEN @IGSPROJCSIDFLT
	WHEN DIVISION='16' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ')  AND SERVICE_OFFERING = 'BTO' THEN @IGSPROJBTODFLT
	WHEN DIVISION='16' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ')  AND SERVICE_OFFERING = 'WEB' THEN @IGSPROJWEBDFLT
	WHEN DIVISION='16' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ')  AND SERVICE_OFFERING NOT IN (
'CSI','BTO','WEB') THEN @IGSPROJ_FOR16
	WHEN DIVISION='16' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ')  AND SERVICE_OFFERING IS NULL THEN @IGSPROJ_FOR16 --DR7065
	WHEN DIVISION='1M' AND (IGS_PROJ IS NULL OR IGS_PROJ = ' ') THEN @IGSPROJ_FOR1M
	ELSE IGS_PROJ
	END

	PRINT '22.1620 - SUCCESSFULLY REACHED END OF XX_CLS_DOWN_LOAD_STAGE_SP.SQL; NEXT - dbo.XX_CLS_DOWN_VALIDATE_CMR_SP'
	
	IF @@ERROR <> 0 GOTO BL_ERROR_HANDLER

PRINT '***********************************************************************************************************************'
PRINT ' END OF ' + @SP_NAME
PRINT '***********************************************************************************************************************'


	/* ERROR HANDLER */

	RETURN(0)

	BL_ERROR_HANDLER:

	PRINT 'ERROR HANDLER FOR ' +@SP_NAME

	EXEC dbo.XX_ERROR_MSG_DETAIL
	   @in_error_code           = @IMAPS_error_number,
	   @in_display_requested    = 1,
	   @in_SQLServer_error_code = @@ERROR,
	   @in_placeholder_value1   = @error_msg_placeholder1,
	   @in_placeholder_value2   = @error_msg_placeholder2,
	   @in_calling_object_name  = @SP_NAME,
	   @out_msg_text            = @out_STATUS_DESCRIPTION OUTPUT

	PRINT @out_STATUS_DESCRIPTION

	RETURN(1)

END


 

 

GO


