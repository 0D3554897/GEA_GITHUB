#NOTICE: Every parameter must have some value. If not applicable, use N or 0, as indicated

#CCS_02 TRX

# log file
log.filename=cff_ccs_02.txt

#debug
#level 0 - logs only the start of each subroutine
#level 1 - logs the start of each subroutine and the start of each major step
#level 2 - logs the start of each subroutine and the start and end of each major step
#level 3 - logs all of the above plus item by item detail for each line in the load file
prod.debug=0

#remainder of ftp that could change depending on use; permanent values are in connections file
ftp.remote.filename=\\inbox\\ceris_r22\\pwcc22_scrambled.csv
ftp.asc_file=D:/apps_to_compile/cff/CCS_02_trx.txt
ftp.ebc_file=D:/apps_to_compile/cff/CCS_02_trx.ebc
ftp.archive.dir=D:/apps_to_compile/csv2db/arkive

#FILE
#use ascii decimal code (0=none, 44=comma, 34=double quotes, etc) (source: https://www.asciitable.com/)
file.delimiter=44
file.enclosure=34
# the number of lines to skip at top of file
file.linestoskip=0
#1 to add linefeed to end of file, 0 if no
file.lfatend=0


#SQL
#sql.to_ebcdic = 0 means don't; 1 means do it; 2 means do it AND create a 2nd plain text file
#sql.ebcdic_columns  =0 for none, otherwise CSV list of nth columns in sql.query to be converted  
#  Example: SELECT ONE,TWO,THREE,FOUR FROM TBL;  sql.ebcdic_columns=3,4 will perform ebcdic packing conversion on THREE and FOUR

# THIS QUERY HAS TAX IN IT IN DEV
#sql.query=sql.query=SELECT A,B,C,D FROM (SELECT '1' ORD,'IMAPS    ' A ,'  RECORDS SENT TO TAX DEPT' B,'  REVENUE AMOUNT SENT TO TAX DEPT' C, 'TAX AMOUNT SENT TO TAX DEPT' D UNION select '2','---------','  ------------------------','  --------------------------------', '---------------------------' UNION SELECT '3','imaps', right(SPACE(24) + cast(SUM(cnt) as varchar (24)),16), right(SPACE(32) + cast(SUM(rev) as varchar(32)),24), RIGHT(SPACE(27) + cast(SUM(statetax + countytax + citytax) as varchar(27)),19) from (select 1 AS CNT   ,(b.BILLED_AMT * 100 - B.SALES_TAX_AMT) as REV,b.STATE_SALES_TAX_AMT  as statetax ,b.COUNTY_SALES_TAX_AMT as countytax ,b.CITY_SALES_TAX_AMT as citytax from imapsstg.dbo.XX_IMAPS_INV_OUT_SUM_TAX a join imapsstg.dbo.XX_IMAPS_INV_OUT_DTL_TAX b on a.INVC_ID = b.invc_id join imaps.deltek.cust_addr c on a.cust_addr_dc = c.ADDR_DC WHERE A.INVC_ID = 'IBM-0002537534' )S )Z

sql.query=SELECT A,B,C,D FROM (SELECT '0' ORD,' ' A,' ' B,' ' C,' ' D UNION SELECT '1' ORD,' ' A,' ' B,' ' C,' ' D  UNION SELECT '2' ORD,'FEED NAME' A ,'  RECORDS SENT TO TAX DEPT' B,'  REVENUE AMOUNT SENT TO TAX DEPT' C, '  TAX AMOUNT SENT TO TAX DEPT' D UNION select '3','---------','  ------------------------','  --------------------------------', '  ---------------------------' UNION SELECT '4','IMAPS', right(SPACE(24) + cast(SUM(cnt) as varchar (24)),22), right(SPACE(32) + cast(SUM(rev) as varchar(32)),32), RIGHT(SPACE(32) + cast(SUM(statetax + countytax + citytax) as varchar(32)),30) from (select 1 AS CNT   ,(b.BILLED_AMT * 100 - B.SALES_TAX_AMT) as REV,b.STATE_SALES_TAX_AMT  as statetax ,b.COUNTY_SALES_TAX_AMT as countytax ,b.CITY_SALES_TAX_AMT as citytax from imapsstg.dbo.XX_IMAPS_INV_OUT_SUM a join imapsstg.dbo.XX_IMAPS_INV_OUT_DTL b on a.INVC_ID = b.invc_id join imaps.deltek.cust_addr c on a.cust_addr_dc = c.ADDR_DC WHERE (A.INVC_AMT - A.CSP_AMT) <> 0 AND A.STATUS_FL <> 'E' )S )Z
sql.to_ebcdic=0
sql.ebcdic_columns=0



