#NOTICE: Every parameter must have some value. If not applicable, use N or 0, as indicated

#SABRIX HEADER

# log file
log.filename=cff_test.txt

#debug
#level 0 - logs only the start of each subroutine
#level 1 - logs the start of each subroutine and the start of each major step
#level 2 - logs the start of each subroutine and the start and end of each major step
#level 3 - logs all of the above plus item by item detail for each line in the load file
prod.debug=0

#remainder of ftp that could change depending on use; permanent values are in connections file
ftp.remote.filename=\\inbox\\ceris_r22\\pwcc22_scrambled.csv
ftp.asc_file=D:/IMAPS_DATA/Interfaces/PROCESS/SABRIX/sabrix_dtl.txt
ftp.ebc_file=D:/IMAPS_DATA/Interfaces/PROCESS/SABRIX/sabrix_dtl.ebc
ftp.archive.dir=D:/IMAPS_DATA/Interfaces/ARCHIVE/SABRIX

#FILE
#use ascii decimal code (0=none, 44=comma, 34=double quotes, etc) (source: https://www.asciitable.com/)
file.delimiter=44
file.enclosure=34
# the number of lines to skip at top of file
file.linestoskip=0
#1 to add linefeed to end of file, 0 if no
file.lfatend=0


#SQL
#sql.to_ebcdic = 0 means don't; 1 means do it; 2 means do it AND create a 2nd plain text file
#sql.ebcdic_columns  =0 for none, otherwise CSV list of nth columns in sql.query to be converted  
#sql.fixneg =0 for no, 1 for yes.  This strips negatives and leading zeroes from numbers. 
#  Example: SELECT ONE,TWO,THREE,FOUR FROM TBL;  sql.ebcdic_columns=3,4 will perform ebcdic packing conversion on THREE and FOUR


#sql.query=select right('                  ' + c_state,2),right('                  ' + c_cnty,3),right('                  ' + c_city,4),'0' as city_limit_code,' ',right('                  ' + I_BO,3),'   ',right('                  ' + ti_svc_bo,3),'0'+cust_addr_dc,RIGHT('                              ' + CUST_NAME, 15),DIVISION,'  ',' ' as cert_status_code,CASE TI_CMR_CUST_TYPE WHEN 'B' THEN 'F' WHEN 'E' THEN 'P' WHEN 'C' THEN 'S' WHEN 'A' THEN 'C' WHEN 'H' THEN 'A' WHEN 'K' THEN 'I' ELSE 'C' END,right('                  ' + TC_TAX_CLASS,3),'142' as source,'9' as origin_code,right('                  ' + tc_agrmnt,2),' ',DIVISION as Q_prod_catgy_code,'       ','       ',right(fy_cd,2) + RIGHT('0'+ cast(pd_no as varchar),2),right(a.INVC_ID,7) as invc,'       ','       ','       ',right(convert(varchar, a.invc_dt, 112),6),right(convert(varchar, b.ts_dt, 112),6),right(convert(varchar, b.ts_dt, 112),6),right(convert(varchar, b.ts_dt, 112),6),'   ','      ','1' as LOCAL_APP_CD,right('    ' + TC_TAX,2),'00001',RIGHT('00000000000000000'+ cast(CONVERT(DECIMAL(11,0),((sum(b.BILLED_AMT - B.SALES_TAX_AMT)) * 100)) as varchar),11) as REV,'000000000' as cost,'000000000' as opt,'000000000' as disc,'000000000' as zonechg,'000000000' as ti_me,RIGHT('00000000000000000'+ cast(CONVERT(DECIMAL(11,0),(SUM(b.STATE_SALES_TAX_AMT) * 100)) as varchar),9) as statetax,RIGHT('00000000000000000'+ cast(CONVERT(DECIMAL(11,0),(SUM(b.COUNTY_SALES_TAX_AMT) * 100)) as varchar),9)as countytax,RIGHT('00000000000000000'+ cast(CONVERT(DECIMAL(11,0),(SUM(b.CITY_SALES_TAX_AMT) * 100)) as varchar),9) as citytax,'  ','    ','2',0,c.mail_state_dc,LEFT(c.CITY_NAME + '                       ',20),LEFT(postal_cd,5),RIGHT(postal_cd,4) from imapsstg.dbo.XX_SABRIX_INV_OUT_SUM a join imapsstg.dbo.XX_SABRIX_INV_OUT_DTL b on a.INVC_ID = b.invc_id join imaps.deltek.cust_addr c on a.cust_addr_dc = c.ADDR_DC WHERE b.BILLED_AMT - B.SALES_TAX_AMT <> 0 AND A.STATUS_FL <> 'E' group by a.C_STATE, a.C_CNTY,A.C_CITY,A.I_BO,A.TI_SVC_BO,A.CUST_ADDR_DC,A.CUST_NAME,A.DIVISION,A.TI_CMR_CUST_TYPE,A.TC_TAX_CLASS,B.TC_AGRMNT,A.FY_CD,A.PD_NO,A.INVC_ID,A.INVC_DT,B.TS_DT,B.TC_TAX,C.MAIL_STATE_DC,C.CITY_NAME,C.POSTAL_CD

sql.query=select * from imapsstg.dbo.xx_sabrix_interface_dtl_vw 
# removed from query -- where rev <> 0
sql.to_ebcdic=2
sql.ebcdic_columns=36,37,38,39,40,41,42,43,44,45
sql.fixneg=1



