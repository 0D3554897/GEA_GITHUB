#NOTICE: Every parameter must have some value. If not applicable, use N or 0, as indicated



#SQL Server Research Only
serialxref.email=N1
serialxref.xlsname=N2
serialxref.subject=N3
serialxref.body=N4
serialxref.mimeType=N5

#to send emails re:missing data to a user
sql.missingxref=SELECT REC_TYPE,SERIAL,HIRE_DATE_EFF,HIRE_DATE_SRD,SEP_DATE,DEPT_MGR_SER_1,DEPT_MGR_NAME_LAST,DEPT_MGR_NAME_INIT,JOB_FAMILY_1,JOB_FAMILY_DATE_1,LEVEL_PREFIX_1,LEVEL_SUFFIX_1,LVL_DATE_1,DIVISION_1,DIVISION_2,DIV_DATE,DEPT_PLUS_SFX,DEPT_DATE,EX_NE_OUT,EXEMPT_DATE,POS_CODE_1,JOB_TITLE,POS_DATE_1,EMPL_STAT_1ST,EMPL_STAT_3RD,EMPL_STAT3_DATE,EMPL_STAT_2ND,EMPL_STAT_DATE,WORK_SCHD,WORK_SCHD_DATE,SET_ID,LOC_WORK_1,LOC_WORK_ST,LOC_WORK_DTE_1,TBWKL_CITY,SALARY,SAL_CHG_DTE_1,SAL_RTE_CDE,SAL_BASE,SAL_MO_OUT,NAME_LAST_MIXED,NAME_FIRST_MIXED,NAME_INIT,CREATION_DATE,CREATED_BY FROM IMAPSSTG.DBO.XX_CERIS_DATA_STG_MISSING WHERE convert(varchar, CREATION_DATE, 101) = convert(varchar, GETDATE(), 101)
missingxref.headers=REC_TYPE,SERIAL,HIRE_DATE_EFF,HIRE_DATE_SRD,SEP_DATE,DEPT_MGR_SER_1,DEPT_MGR_NAME_LAST,DEPT_MGR_NAME_INIT,JOB_FAMILY_1,JOB_FAMILY_DATE_1,LEVEL_PREFIX_1,LEVEL_SUFFIX_1,LVL_DATE_1,DIVISION_1,DIVISION_2,DIV_DATE,DEPT_PLUS_SFX,DEPT_DATE,EX_NE_OUT,EXEMPT_DATE,POS_CODE_1,JOB_TITLE,POS_DATE_1,EMPL_STAT_1ST,EMPL_STAT_3RD,EMPL_STAT3_DATE,EMPL_STAT_2ND,EMPL_STAT_DATE,WORK_SCHD,WORK_SCHD_DATE,SET_ID,LOC_WORK_1,LOC_WORK_ST,LOC_WORK_DTE_1,TBWKL_CITY,SALARY,SAL_CHG_DTE_1,SAL_RTE_CDE,SAL_BASE,SAL_MO_OUT,NAME_LAST_MIXED,NAME_FIRST_MIXED,NAME_INIT,CREATION_DATE,CREATED_BY
missingxref.mimeType=application/msexcel 
missingxref.xlsname=missing_data_Div16.xls 
missingxref.subject=IBM Confidential: WORKDAY Records with Missing Data for Div16 
missingxref.body=Generated from most recent WORKDAY input. Please see timestamp on attached file. 


sql.h_truncate=TRUNCATE TABLE IMAPSSTG.DBO.XX_CERIS_DATA_HDR_STG
# does the csv include a distinct header record?  1=Y or 0=N
sql.h_header=1
#if so, do you want to process it separately?  1=Y or 0=N
sql.h_process_header=1
#if so, provide the SQL statement to insert, otherwise N
sql.h_insert=INSERT INTO IMAPSSTG.dbo.XX_CERIS_DATA_HDR_STG (REC_TYPE,LAB1,RUN_DATE,FIL2,RUN_TIME,LAB3,RECS_OUT,LAB4,SEQ_OUT,LAB5,HASH,LAB6,IBM_CLASSIFICATION,DMEM_AS_OF_DATE,LAB7,EMP_FILENAME,LAB8,WKL_FILENAME,CREATION_DATE,CREATED_BY) VALUES( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'mt', current_timestamp, suser_sname() )
#if so, provide the order and inclusion instructions, otherwise just make this value = N
# a zero represents don't load it into table, >0 means in which column (according to the insert statement) the data should be inserted, starting at column 1
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is your first, CSV third value is your 24th, CSV fourth value is your ninth.)
# The example instruction is expressed as 0,1,24,9
sql.h_includeColumn=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17

# next set of values is to optionally decrement the record count in header for each missing record
#default is to not record how many records are missing. Post-insert validation counts records in both tables if it can
# make this value = 0 if don't want to adjust record count in header for missing records; otherwise 1
sql.h_adj_flg=0
# if =1 then must provide sql to update record count if you do
sql.h_adj_hdr=UPDATE IMAPSSTG.dbo.XX_CERIS_DATA_HDR_STG  set RECS_OUT = (RECS_OUT-1)


# for Div22 SQL Server Only
sql.serialxref=N6

# use encryption?
sql.useEncrypt=N7
# SQL for encryption, otherwise N 
sql.writeKey=N8
sql.readKey=N9
sql.readSQLKeyPassword=N10
sql.openSQLKey=N11
sql.closeSQLKey=N12

# data load 
sql.truncate=TRUNCATE TABLE IMAPSSTG.DBO.XX_CERIS_DATA_STG

# first, provide the SQL statement to insert the data
# arrange the columns in any order, consistent with the previous variable
sql.insert=INSERT INTO DBO.XX_CERIS_DATA_STG(REC_TYPE,SERIAL,HIRE_DATE_EFF,HIRE_DATE_SRD,SEP_DATE,DEPT_MGR_SER_1,DEPT_MGR_NAME_LAST,DEPT_MGR_NAME_INIT,JOB_FAMILY_1,JOB_FAMILY_DATE_1,LEVEL_PREFIX_1,LEVEL_SUFFIX_1,LVL_DATE_1,DIVISION_1,DIVISION_2,DIV_DATE,DEPT_PLUS_SFX,DEPT_DATE,EX_NE_OUT,EXEMPT_DATE,POS_CODE_1,JOB_TITLE,POS_DATE_1,EMPL_STAT_1ST,EMPL_STAT_3RD,EMPL_STAT3_DATE,EMPL_STAT_2ND,EMPL_STAT_DATE,WORK_SCHD,WORK_SCHD_DATE,SET_ID,LOC_WORK_1,LOC_WORK_ST,LOC_WORK_DTE_1,TBWKL_CITY,SALARY,SAL_CHG_DTE_1,SAL_RTE_CDE,SAL_BASE,SAL_MO_OUT,NAME_LAST_MIXED,NAME_FIRST_MIXED,NAME_INIT,CREATION_DATE,CREATED_BY) VALUES (?,?,?,?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,50),SUBSTRING(?,1,50),?,getdate(),'csv2db');

# then SQL for when required data is missing (should be identical except for the table and created by)
sql.missing=INSERT INTO DBO.XX_CERIS_DATA_STG_MISSING(REC_TYPE,SERIAL,HIRE_DATE_EFF,HIRE_DATE_SRD,SEP_DATE,DEPT_MGR_SER_1,DEPT_MGR_NAME_LAST,DEPT_MGR_NAME_INIT,JOB_FAMILY_1,JOB_FAMILY_DATE_1,LEVEL_PREFIX_1,LEVEL_SUFFIX_1,LVL_DATE_1,DIVISION_1,DIVISION_2,DIV_DATE,DEPT_PLUS_SFX,DEPT_DATE,EX_NE_OUT,EXEMPT_DATE,POS_CODE_1,JOB_TITLE,POS_DATE_1,EMPL_STAT_1ST,EMPL_STAT_3RD,EMPL_STAT3_DATE,EMPL_STAT_2ND,EMPL_STAT_DATE,WORK_SCHD,WORK_SCHD_DATE,SET_ID,LOC_WORK_1,LOC_WORK_ST,LOC_WORK_DTE_1,TBWKL_CITY,SALARY,SAL_CHG_DTE_1,SAL_RTE_CDE,SAL_BASE,SAL_MO_OUT,NAME_LAST_MIXED,NAME_FIRST_MIXED,NAME_INIT,CREATION_DATE,CREATED_BY) VALUES (?,?,?,?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,50),SUBSTRING(?,1,50),?,getdate(),'MISSING');

# then create the instruction that maps the CSV to your columns
# a zero represents don't load the field into table, >0 means in which column (according to the insert statement) each field should be inserted, starting with first field in the CSV
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: value pairs: CSV,column: 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is your first, CSV third value is your 24th, CSV fourth value is your ninth.)
# The example instruction is expressed as 0,1,24,9
sql.includeColumn=1*,2*,41*,42*,24*,27*,9*,21*,29*,19*,4*,10*,23*,0,0,0,11*,12,14*,15,16*,6*,7*,8*,17*,0,5,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,18*,43*,28*,26,13*,22*,0,0,0,0,20,3*,30*,36*,37*,0,0,31,32,35,33,34*,38,39*,40*

# the following setting is created specifically for Div 22, because some values require encryption.
# When the value NULL is encrypted, the result is an encrypted number that looks like any other encrypted value. After encryption, you can't tell if the value is NULL or not.
# this is problematic for users trying to look at the data to see what required values are missing, because there's no way to tell after encryption
# the SQL can be set up to compensate for this condition, but it requires an additional parameter in the SQL statement, like this:
# normal (1 parameter):  EncryptByKey(Key_GUID('IMAPS_CERIS'),?)   
# compensated by sql (2 parameters): case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END
# the second example allows the user to see at a glance (value = 0x) that the field was NULL, whereas the first will not
# the java program needs to know two things about the missing sql statement, a) are additional parameters used, and b) if so, which ones
# this setting conveys that information.  The first value is 1 or 0, yes or no.  
# The remaining values are the non-zero CSV ordinal number of sql.includeColumn values that are using additonal parameters
# Example: sql.missing_ra=0  means not used.
# Example: sql.missing_ra=1,1 means used, and a new parameter will be created for the first non-zero item in sql.includeColumn
# Example: sql.missing_ra=1,1,3,5 means used, and a new parameter will be created for the first, third and fifth non-zero item in sql.includeColumn 
# no trailing spaces allowed 
sql.missing_ra=0,0


# does the csv include records you want to skip? 1=Y or 0=N
skip.records=1

# create value pairs that correspond to the criteria for deletion, column#_to_check:value,column#_to_check:value,field#_to_check:value,field#_to_check:value....
# column number means the nth item in the SQL statement, not in the file
skip.criteria=21,stem

# keep track of a skip hash or total? 1=Y or 0=N
skip.count=1

# sql to use to update skip.hash as each record is processed
skip.SQL=UPDATE IMAPSSTG.DBO.XX_CERIS_DATA_HDR_STG SET HASH = coalesce(ltrim(rtrim(HASH)),'0') + CAST(CHARINDEX('xx',HASH) AS INT) + CAST(LTRIM(RTRIM(?)) as INT)