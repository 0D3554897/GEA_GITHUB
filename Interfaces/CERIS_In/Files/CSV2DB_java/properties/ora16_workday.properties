#NOTICE: Every parameter must have some value. If not applicable, use N or 0, as indicated

# research SQL Server only
serialxref.email=N
serialxref.xlsname=N
serialxref.subject=N
serialxref.body=N
serialxref.mimeType=N

#to send emails re:missing data to a user
sql.missingxref=SELECT EMPLID,LNAME,FNAME,REG_TEMP,HIRE_DATE,JOB_FAMILY,POS_CODE,STATUS,DEPT,WRK_OFF,STD_HRS,FLSA_STAT,TERM_DT,DIVISION,JF_DT,POS_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,SAL_BAND,LEVEL_SUFFIX,DIVISION_FROM,DIVISION_STRT_DATE,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIAL,CURR_DIV_FUNC_CODE,CURR_REP_LEVEL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LEVEL_CODE,MGR2LAST,MGR2INIT,MGR3LAST,MGR3INIT,HIRETYPE,HIRPRGM,STAT3,SEPRSN,DEPTFROM,VACELGD,CMPLN,BLDGID,DEPT_ST_DATE,NAME_INIT,EMPL_STAT_DATE,EMPL_STAT3_DATE,LVL_DATE_1,POS_DESC,DEPT_SUF_DATE,DEPT_SHIFT_DTE,DEPT_SHIFT_1,MGR_FLAG,EXEMPT_DATE,HIRE_DATE_EFF,WORK_SCHD_DATE,SALESTID,WKLNEW,WKLYCITY,WKLST,CREATE_DATE,COMP_RATE,CREATED_BY FROM CFRPTADM.IBM_CERIS_MISSING WHERE CREATE_DATE = TRUNC(SYSDATE)
missingxref.headers=EMPLID,LNAME,FNAME,REG_TEMP,HIRE_DATE,JOB_FAMILY,POS_CODE,STATUS,DEPT,WRK_OFF,STD_HRS,FLSA_STAT,TERM_DT,DIVISION,JF_DT,POS_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,SAL_BAND,LEVEL_SUFFIX,DIVISION_FROM,DIVISION_STRT_DATE,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIAL,CURR_DIV_FUNC_CODE,CURR_REP_LEVEL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LEVEL_CODE,MGR2LAST,MGR2INIT,MGR3LAST,MGR3INIT,HIRETYPE,HIRPRGM,STAT3,SEPRSN,DEPTFROM,VACELGD,CMPLN,BLDGID,DEPT_ST_DATE,NAME_INIT,EMPL_STAT_DATE,EMPL_STAT3_DATE,LVL_DATE_1,POS_DESC,DEPT_SUF_DATE,DEPT_SHIFT_DTE,DEPT_SHIFT_1,MGR_FLAG,EXEMPT_DATE,HIRE_DATE_EFF,WORK_SCHD_DATE,SALESTID,WKLNEW,WKLYCITY,WKLST,CREATE_DATE,COMP_RATE,CREATED_BY
missingxref.mimeType=application/msexcel 
missingxref.xlsname=missing_data_ORA16.xls 
missingxref.subject=IBM Confidential: WORKDAY Records with Missing Data for Div16 (Oracle) 
missingxref.body=Generated from most recent WORKDAY input. Please see timestamp on attached file. 


sql.h_truncate=DELETE FROM CFRPTADM.IBM_CERIS
# does the csv include a distinct header record?  1=Y or 0=N
sql.h_header=1
#if so, do you want to process it separately?  1=Y or 0=N (ie, 0 means ignore it)
sql.h_process_header=0
#if so, provide the SQL statement to insert the header, otherwise N
# arrange the columns in any order you like
sql.h_insert=N
#if so, provide the order and inclusion instructions, otherwise just make this value = 0
# to create the instruction that maps the CSV to your columns:
# a zero represents don't load the field into table, >0 means in which column (according to the insert statement) each field should be inserted, starting with first field in the CSV
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: value pairs: CSV column, sql insert column 
# 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is first in sql, CSV third value is 24th in sql, CSV fourth value is ninth in sql.)
# However, you only specify the 2nd value of the value pair, because the CSV columns are already in order.  The order of the CSV columns is implied by their actual order.
# Therefore, the example instruction is expressed as 0,1,24,9
sql.h_includeColumn=0


# next set of values is to optionally decrement the record count in header for each missing record
#default is to not record how many records are missing. Post-insert validation counts records in both tables if it can
# make this value = 0 if don't want to adjust record count in header for missing records; otherwise 1
sql.h_adj_flg=0
# if =1 then must provide sql to update record count if you do
sql.h_adj_hdr=UPDATE IMAPSSTG.dbo.XX_ORA_CERIS_DATA_HDR_STG  set RECS_OUT = (RECS_OUT-1)


# for Div22 SQL Server Only
sql.serialxref=N

# use encryption?
sql.useEncrypt=N
# SQL for encryption, otherwise N 
sql.writeKey=N
sql.readKey=N
sql.readSQLKeyPassword=N
sql.openSQLKey=N
sql.closeSQLKey=N

#data load
sql.truncate=DELETE FROM CFRPTADM.IBM_CERIS
# first, set up your SQL statement to load data into the target table
# arrange the columns in any order you like
sql.insert=INSERT INTO CFRPTADM.IBM_CERIS(EMPLID,LNAME,FNAME,REG_TEMP,HIRE_DATE,JOB_FAMILY,POS_CODE,STATUS,DEPT,WRK_OFF,STD_HRS,FLSA_STAT,TERM_DT,DIVISION,JF_DT,POS_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,SAL_BAND,LEVEL_SUFFIX,DIVISION_FROM,DIVISION_STRT_DATE,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIAL,CURR_DIV_FUNC_CODE,CURR_REP_LEVEL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LEVEL_CODE,MGR2LAST,MGR2INIT,MGR3LAST,MGR3INIT,HIRETYPE,HIRPRGM,STAT3,SEPRSN,DEPTFROM,VACELGD,CMPLN,BLDGID,DEPT_ST_DATE,NAME_INIT,EMPL_STAT_DATE,EMPL_STAT3_DATE,LVL_DATE_1,POS_DESC,DEPT_SUF_DATE,DEPT_SHIFT_DTE,DEPT_SHIFT_1,MGR_FLAG,EXEMPT_DATE,HIRE_DATE_EFF,WORK_SCHD_DATE,SALESTID,WKLNEW,WKLYCITY,WKLST,CREATE_DATE,COMP_RATE) VALUES (?,?,?,?,nvl(to_date(?,'YYYYMMDD'),null),?,?,?,?,?,to_number(?),?,nvl(to_date(?,'YYYYMMDD'),null),?,nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),?,?,?,?,nvl(to_date(?,'YYYYMMDD'),null),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,nvl(to_date(?,'YYYYMMDD'),null),?,nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),?,nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),?,?,nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),nvl(to_date(?,'YYYYMMDD'),null),?,?,?,?,trunc(sysdate),0)

# then SQL for when required data is missing (should be identical except for the table and created by)
sql.missing=INSERT INTO CFRPTADM.IBM_CERIS_MISSING(EMPLID,LNAME,FNAME,REG_TEMP,HIRE_DATE,JOB_FAMILY,POS_CODE,STATUS,DEPT,WRK_OFF,STD_HRS,FLSA_STAT,TERM_DT,DIVISION,JF_DT,POS_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,SAL_BAND,LEVEL_SUFFIX,DIVISION_FROM,DIVISION_STRT_DATE,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIAL,CURR_DIV_FUNC_CODE,CURR_REP_LEVEL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LEVEL_CODE,MGR2LAST,MGR2INIT,MGR3LAST,MGR3INIT,HIRETYPE,HIRPRGM,STAT3,SEPRSN,DEPTFROM,VACELGD,CMPLN,BLDGID,DEPT_ST_DATE,NAME_INIT,EMPL_STAT_DATE,EMPL_STAT3_DATE,LVL_DATE_1,POS_DESC,DEPT_SUF_DATE,DEPT_SHIFT_DTE,DEPT_SHIFT_1,MGR_FLAG,EXEMPT_DATE,HIRE_DATE_EFF,WORK_SCHD_DATE,SALESTID,WKLNEW,WKLYCITY,WKLST,CREATE_DATE,COMP_RATE,CREATED_BY) VALUES (NVL(trim(?),'MISSING'),?,?,?,?,?,?,?,NVL(trim(?),'MISSING'),?,?,?,?,NVL(trim(?),'MISSING'),?,?,?,?,?,?,?,?,NVL(trim(?),'MISSING'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NVL(trim(?),'MISSING'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,trunc(sysdate),'0','MISSING')

# then create the instruction that maps the CSV to your columns
# a zero represents don't load the field into table, >0 means in which column (according to the insert statement) each field should be inserted, starting with first field in the CSV
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: value pairs: CSV column, sql insert column 
# 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is first in sql, CSV third value is 24th in sql, CSV fourth value is ninth in sql.)
# However, you only specify the 2nd value of the value pair, because the CSV columns are already in order.  The order of the CSV columns is implied by their actual order.
# Therefore, the example instruction is expressed as 0,1,24,9
#oldsql.includeColumn=0,1,2,3,4,8,6,7,11,12,5,15,16,17,18,19,20,21,14,22,23,24,25,26,9,10,13,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,42,54,55,0,0,0,0,56,57,58,59,0,0,0,0
sql.includeColumn=0,1*,2,3,4,8,6,7,11,12,5,15,16,17,18,19,20,21,14*,22,23*,24,25,26,9*,10,13,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43*,44,45,46,47,48,49,50,51,52,42,54,55,0,0,0,0,56,57,58,59,0,0,0,0


# the following setting is created specifically for Div 22, because some values require encryption.
# When the value NULL is encrypted, the result is an encrypted number that looks like any other encrypted value. After encryption, you can't tell if the value is NULL or not.
# this is problematic for users trying to look at the data to see what required values are missing, because there's no way to tell after encryption
# the SQL can be set up to compensate for this condition, but it requires an additional parameter in the SQL statement, like this:
# normal (1 parameter):  EncryptByKey(Key_GUID('IMAPS_CERIS'),?)   
# compensated by sql (2 parameters): case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END
# the second example allows the user to see at a glance (value = 0x) that the field was NULL, whereas the first will not
# the java program needs to know two things about the missing sql statement, a) are additional parameters used, and b) if so, which ones
# this setting conveys that information.  The first value is 1 or 0, yes or no.  
# The remaining values are the non-zero CSV ordinal number of sql.includeColumn values that are using additonal parameters
# Example: sql.missing_ra=0  means not used.
# Example: sql.missing_ra=1,1 means used, and a new parameter will be created for the first non-zero item in sql.includeColumn
# Example: sql.missing_ra=1,1,3,5 means used, and a new parameter will be created for the first, third and fifth non-zero item in sql.includeColumn 
# no trailing spaces allowed 
sql.missing_ra=0,0


# does the csv include records you want to skip? 1=Y or 0=N
skip.records=0
# create value pairs that correspond to the criteria for deletion, column#_to_check:value,column#_to_check:value,field#_to_check:value,field#_to_check:value....
# column number means the nth item in the SQL statement, not in the file
skip.criteria=22,stem
# keep track of a skip hash or total? 1=Y or 0=N
skip.count=0
# sql to use to update skip.hash as each record is processed
skip.SQL=UPDATE IMAPSSTG.DBO.XX_CERIS_DATA_HDR_STG SET HASH = coalesce(ltrim(rtrim(HASH)),'0') + CAST(CHARINDEX('xx',HASH) AS INT) + CAST(LTRIM(RTRIM(?)) as INT)