#NOTICE: Every parameter must have some value. If not applicable, use N

#check opencsv (http://opencsv.sourceforge.net/) for syntax for the following
ftp.delimiter=\,
ftp.enclosure=\"
ftp.linestoskip=0

#SQL Server Research only
# for Div22 SQL Server Only
sql.serialxref=SELECT C.FIRST_NAME, C.LAST_NAME, CONVERT(VARCHAR(50), DECRYPTBYKEY(A.R_EMPL_ID)) R_EMPL_ID, A.EMPL_ID , D.PROJ_ABBRV_CD FROM DBO.XX_R22_CERIS_EMPL_ID_MAP A LEFT JOIN IMAR.DELTEK.PROJ_EMPL B ON (A.EMPL_ID=B.EMPL_ID) JOIN IMAR.DELTEK.EMPL C ON (A.EMPL_ID=C.EMPL_ID AND C.TERM_DT IS NULL) LEFT JOIN IMAR.DELTEK.PROJ D ON (B.PROJ_ID = D.PROJ_ID) ORDER BY LAST_NAME, FIRST_NAME 
serialxref.mimeType=application/msexcel 
serialxref.xlsname=research_empl_xref.xls 
serialxref.subject=IBM Confidential: Employee Cross-Ref Info for Research IMAR 
serialxref.body=Generated from most recent WORKDAY input. Please see timestamp on attached file. 

Attachment: 



#to send missing emails to a user
sql.missingxref=SELECT CONVERT(VARCHAR(50), DECRYPTBYKEY(A.R_EMPL_ID)) REAL_SERIAL, coalesce(B.EMPL_ID, 'NOT IN MAP') R_SERIAL ,case A.r_empl_id when 0x then 'MISSING' else '0x'+ convert(varchar(100),a.r_empl_id,2) end ,A.LNAME ,A.FNAME ,A.NAME_INITIALS ,A.HIRE_EFF_DT ,A.IBM_START_DT ,A.TERM_DT ,case A.mgr_serial_num when 0x then 'MISSING' else  '0x'+ convert(varchar(100),a.mgr_serial_num,2)  end ,A.MGR_LNAME ,A.MGR_INITIALS ,A.JOB_FAM ,A.JOB_FAM_DT ,A.SAL_BAND ,A.LVL_DT_1 ,A.DIVISION ,A.DIVISION_START_DT ,A.DEPT ,A.DEPT_START_DT ,A.DEPT_SUF_DT ,A.FLSA_STAT ,A.EXEMPT_DT ,A.POS_CODE ,A.POS_DESC ,A.POS_DT ,A.REG_TEMP ,A.STAT3 ,A.EMPL_STAT3_DT ,A.STATUS ,A.EMPL_STAT_DT ,A.STD_HRS ,A.WORK_SCHD_DT ,A.LOA_BEG_DT ,A.LOA_END_DT ,A.LOA_TYPE ,A.LVL_SUFFIX ,A.DIVISION_FROM ,A.WORK_OFF ,A.CURR_DIV_FUNC_CODE ,A.CURR_REP_LVL_CODE ,A.PREV_DIV_FUNC_CODE ,A.PREV_REP_LVL_CODE ,A.MGR2_LNAME ,A.MGR2_INITIALS ,A.MGR3_LNAME ,A.MGR3_INITIALS ,A.HIRE_TYPE ,A.HIRE_PRGM ,A.SEPRSN ,A.DEPT_FROM ,A.VACELGD ,A.CMPLN ,A.BLDG_ID ,A.DEPT_SHIFT_DT ,A.DEPT_SHIFT_1 ,A.MGR_FLAG ,case A.salary when 0x then 'MISSING' else  '0x'+ convert(varchar(100),a.salary,2) end ,A.SALARY_DT,A.CREATION_DATE ,A.CREATED_BY ,A.ASTYP ,A.ASNTYP FROM  IMAPSSTG.DBO.XX_R22_CERIS_DATA_STG_MISSING A  left outer jOIN  IMAPSSTG.DBO.XX_R22_CERIS_EMPL_ID_MAP B   ON CONVERT(VARCHAR(50), DECRYPTBYKEY(A.R_EMPL_ID)) =   CONVERT(VARCHAR(50), DECRYPTBYKEY(B.R_EMPL_ID))  WHERE convert(varchar,CREATION_DATE,112)=convert(varchar,getDate(),112)
missingxref.headers=REAL_SERIAL , R_SERIAL , R_EMPL_ID , LNAME , FNAME , NAME_INITIALS , HIRE_EFF_DT , IBM_START_DT , TERM_DT , MGR_SERIAL_NUM , MGR_LNAME , MGR_INITIALS , JOB_FAM , JOB_FAM_DT , SAL_BAND , LVL_DT_1 , DIVISION , DIVISION_START_DT , DEPT , DEPT_START_DT , DEPT_SUF_DT , FLSA_STAT , EXEMPT_DT , POS_CODE , POS_DESC , POS_DT , REG_TEMP , STAT3 , EMPL_STAT3_DT , STATUS , EMPL_STAT_DT , STD_HRS , WORK_SCHD_DT , LOA_BEG_DT , LOA_END_DT , LOA_TYPE , LVL_SUFFIX , DIVISION_FROM , WORK_OFF , CURR_DIV_FUNC_CODE , CURR_REP_LVL_CODE , PREV_DIV_FUNC_CODE , PREV_REP_LVL_CODE , MGR2_LNAME , MGR2_INITIALS , MGR3_LNAME , MGR3_INITIALS , HIRE_TYPE , HIRE_PRGM , SEPRSN , DEPT_FROM , VACELGD , CMPLN , BLDG_ID , DEPT_SHIFT_DT , DEPT_SHIFT_1 , MGR_FLAG , SALARY , SALARY_DT , CREATION_DATE , CREATED_BY , ASTYP , ASNTYP
missingxref.mimeType=application/msexcel 
missingxref.xlsname=research_missingxref.xls 
missingxref.subject=IBM Confidential: WORKDAY Records with Missing Data for Research IMAR 
missingxref.body=Generated from most recent WORKDAY input. Please see timestamp on attached file. 

Attachment: 



#header in file
sql.h_truncate=TRUNCATE TABLE IMAPSSTG.DBO.XX_R22_CERIS_DATA_HDR_STG
# does the csv include a distinct header record?  1=Y or 0=N
sql.h_header=1
#if so, do you want to process it separately?  1=Y or 0=N
sql.h_process_header=1
#if so, provide the SQL statement to insert, otherwise N
sql.h_insert=INSERT INTO IMAPSSTG.dbo.XX_R22_CERIS_DATA_HDR_STG (STATUS_RECORD_NUM, REC_TYPE,LAB1,RUN_DATE,FIL2,RUN_TIME,LAB3,RECS_OUT,LAB4,SEQ_OUT,LAB5,HASH,LAB6,IBM_CLASSIFICATION,DMEM_AS_OF_DATE,LAB7,EMP_FILENAME,LAB8,WKL_FILENAME,CREATION_DATE,CREATED_BY) VALUES(0,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'mt', current_timestamp, suser_sname() )
#if so, provide the order and inclusion instructions, otherwise just make this value = N
# a zero represents don't load it into table, >0 means in which column (according to the insert statement) the data should be inserted, starting at column 1
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is your first, CSV third value is your 24th, CSV fourth value is your ninth.)
# The example instruction is expressed as 0,1,24,9
sql.h_includeColumn=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17

# next set of values is to optionally decrement the record count in header for each missing record
#default is to not record how many records are missing. Post-insert validation counts records in both tables if it can
# make this value = 0 if don't want to adjust record count in header for missing records; otherwise 1
sql.h_adj_flg=0
# if =1 then must provide sql to update record count if you do
sql.h_adj_hdr=UPDATE IMAPSSTG.dbo.XX_CERIS_DATA_HDR_STG  set RECS_OUT = (RECS_OUT-1)

# use encryption?
sql.useEncrypt=Y
# SQL for encryption, otherwise N 
sql.writeKey=INSERT INTO DBO.XX_PROCESSING_PARAMETERS (PARAMETER_NAME,PARAMETER_VALUE,PASSKEY_VALUE,INTERFACE_NAME_ID,INTERFACE_NAME_CD,CREATED_BY,MODIFIED_BY,CREATED_DATE,MODIFIED_DATE) VALUES('CERISR_FILE_PASS_KEY','N/A',?,114,'CERIS_R22','encrypt_user','encrypt_user',getdate(),'csv2db')
sql.readKey=SELECT PASSKEY_VALUE FROM DBO.XX_PROCESSING_PARAMETERS WHERE INTERFACE_NAME_CD='CERIS_R22' AND PARAMETER_NAME='CERISR_FILE_PASS_KEY'
sql.truncate=DELETE FROM DBO.XX_R22_CERIS_FILE_STG1
sql.readSQLKeyPassword=SELECT PARAMETER_VALUE FROM DBO.XX_PROCESSING_PARAMETERS WHERE PARAMETER_NAME='PASSKEY_VALUE'
sql.openSQLKey=OPEN SYMMETRIC KEY IMAPS_CERIS DECRYPTION BY PASSWORD = '?'
sql.closeSQLKey=CLOSE SYMMETRIC KEY IMAPS_CERIS

# data load
# first, provide the SQL statement to insert the data
# arrange the columns in any order, consistent with the previous variable
sql.insert=INSERT INTO DBO.XX_R22_CERIS_FILE_STG1 (R_EMPL_ID,LNAME,	FNAME,NAME_INITIALS,HIRE_EFF_DT,IBM_START_DT,TERM_DT,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIALS,JOB_FAM,JOB_FAM_DT,SAL_BAND,	LVL_DT_1,DIVISION,DIVISION_START_DT,DEPT,DEPT_START_DT,DEPT_SUF_DT,FLSA_STAT,EXEMPT_DT,POS_CODE,POS_DESC,	POS_DT,	REG_TEMP,STAT3,	EMPL_STAT3_DT,STATUS,EMPL_STAT_DT,STD_HRS,WORK_SCHD_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,LVL_SUFFIX,DIVISION_FROM,WORK_OFF,CURR_DIV_FUNC_CODE,CURR_REP_LVL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LVL_CODE,MGR2_LNAME,MGR2_INITIALS,MGR3_LNAME,MGR3_INITIALS,HIRE_TYPE,HIRE_PRGM,SEPRSN,DEPT_FROM,VACELGD,CMPLN,BLDG_ID,DEPT_SHIFT_DT,DEPT_SHIFT_1,SALARY,SALARY_DT,ASTYP,ASNTYP,MGR_FLAG,CREATION_DATE,CREATED_BY) VALUES (EncryptByKey(Key_GUID('IMAPS_CERIS'),?),SUBSTRING(?,1,25),SUBSTRING(?,1,20),?,?,?,?,EncryptByKey(Key_GUID('IMAPS_CERIS'),?),SUBSTRING(?,1,25),?,?,?,?,?,?,?,?,?,COALESCE(NULLIF(LTRIM(RTRIM(?)),''),CONVERT(varchar,GETDATE(),112)),?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,25),?,SUBSTRING(?,1,25),?,?,?,?,?,?,?,?,?,?,EncryptByKey(Key_GUID('IMAPS_CERIS'),?),?,?,?,'x',getdate(),'csv2db');


# then create the instruction that maps the CSV to your columns
# a zero represents don't load the field into table, >0 means in which column (according to the insert statement) each field should be inserted, starting with first field in the CSV
# think of it as a value pair, CSV ordinal to SQL ordinal. 
#Example: value pairs: CSV,column: 1,0; 2,1; 3,24; 4,9 (CSV first value is not used, CSV second value is your first, CSV third value is your 24th, CSV fourth value is your ninth.)
# The example instruction is expressed as 0,1,24,9
sql.includeColumn=0,1*,2*,3*,25*,28*,11*,22*,30*,20*,6*,12*,24*,32,33,34,13*,35,15*,36,16*,8*,9*,10*,17*,37,7,38,39,40,41,42*,43*,44*,45*,46,47,26,48,49,50,51,52,18*,4*,29*,27,14*,23*,19,53*,54*,0,21,5*,31*,55*,56*,57,58,0,0,0,0,0,0,0,0

# then SQL for when required data is missing (should be identical except for the table and created by)
sql.missing=INSERT INTO DBO.XX_R22_CERIS_DATA_STG_MISSING(R_EMPL_ID,LNAME,FNAME,NAME_INITIALS,HIRE_EFF_DT,IBM_START_DT,TERM_DT,MGR_SERIAL_NUM,MGR_LNAME,MGR_INITIALS,JOB_FAM,JOB_FAM_DT,SAL_BAND,LVL_DT_1,DIVISION,DIVISION_START_DT,DEPT,DEPT_START_DT,DEPT_SUF_DT,FLSA_STAT,EXEMPT_DT,POS_CODE,POS_DESC,POS_DT,REG_TEMP,STAT3,EMPL_STAT3_DT,STATUS,EMPL_STAT_DT,STD_HRS,WORK_SCHD_DT,LOA_BEG_DT,LOA_END_DT,LOA_TYPE,LVL_SUFFIX,DIVISION_FROM,WORK_OFF,CURR_DIV_FUNC_CODE,CURR_REP_LVL_CODE,PREV_DIV_FUNC_CODE,PREV_REP_LVL_CODE,MGR2_LNAME,MGR2_INITIALS,MGR3_LNAME,MGR3_INITIALS,HIRE_TYPE,HIRE_PRGM,SEPRSN,DEPT_FROM,VACELGD,CMPLN,BLDG_ID,DEPT_SHIFT_DT,DEPT_SHIFT_1,SALARY,SALARY_DT,ASTYP,ASNTYP,MGR_FLAG,CREATION_DATE,CREATED_BY) VALUES (case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END,SUBSTRING(?,1,25),SUBSTRING(?,1,20),?,?,?,?,case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END,SUBSTRING(?,1,25),?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,30),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SUBSTRING(?,1,25),?,SUBSTRING(?,1,25),?,?,?,?,?,?,?,?,?,?,case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END,?,?,?,'x',getdate(),'MISSING');

# the following setting is created specifically for Div 22, because some values require encryption.
# When the value NULL is encrypted, the result is an encrypted number that looks like any other encrypted value. After encryption, you can't tell if the value is NULL or not.
# this is problematic for users trying to look at the data to see what required values are missing, because there's no way to tell after encryption
# the SQL can be set up to compensate for this condition, but it requires an additional parameter in the SQL statement, like this:
# normal (1 parameter):  EncryptByKey(Key_GUID('IMAPS_CERIS'),?)   
# compensated by sql (2 parameters): case when ? = '~MISSING' Then CONVERT(VARBINARY(25),'0x',1) Else EncryptByKey(Key_GUID('IMAPS_CERIS'),?) END
# the second example allows the user to see at a glance (value = 0x) that the field was NULL, whereas the first will not
# the java program needs to know two things about the missing sql statement, a) are additional parameters used, and b) if so, which ones
# this setting conveys that information.  The first value is 1 or 0, yes or no.  
# The remaining values are the non-zero CSV ordinal number of sql.includeColumn values that are using additonal parameters
# Example: sql.missing_ra=0  means not used.
# Example: sql.missing_ra=1,1 means used, and a new parameter will be created for the first non-zero item in sql.includeColumn
# Example: sql.missing_ra=1,1,3,5 means used, and a new parameter will be created for the first, third and fifth non-zero item in sql.includeColumn 
# no trailing spaces allowed 
sql.missing_ra=1,1,8,55


# does the csv include records you want to skip? 1=Y or 0=N
skip.records=1
# create value pairs that correspond to the criteria for deletion, column#_to_check:value,column#_to_check:value,field#_to_check:value,field#_to_check:value....
# column number means the nth item in the SQL statement, not in the file
skip.criteria=22,stem
# keep track of a skip hash or total? 1=Y or 0=N
skip.count=1
# sql to use to update skip.hash as each record is processed
skip.SQL=UPDATE IMAPSSTG.DBO.XX_R22_CERIS_DATA_HDR_STG SET HASH = coalesce(ltrim(rtrim(HASH)),'0') + CAST(CHARINDEX('xx',HASH) AS INT) + CAST(LTRIM(RTRIM(?)) as INT)